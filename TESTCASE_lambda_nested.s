
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1

section .data
const_tbl:
MAKE_BOOL(1)
MAKE_BOOL(0)
MAKE_NIL
MAKE_VOID
MAKE_LITERAL_INT(1)
MAKE_LITERAL_STRING "whatever", 8
MAKE_LITERAL_SYMBOl(const_tbl+15)
MAKE_LITERAL_INT(0)
MAKE_LITERAL_CHAR (0)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+5
%define SOB_NIL_ADDRESS const_tbl+4
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+0

fvar_tbl:
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED

global main
extern memmove
section .text
main:
    push rbp

    ;; set up the heap
    mov rdi, GB(4)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push SOB_NIL_ADDRESS
    push qword T_UNDEFINED
    push rsp
    mov rbp,rsp

    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_boolean)
    mov [fvar_tbl+8*0], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_float)
    mov [fvar_tbl+8*1], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_integer)
    mov [fvar_tbl+8*2], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_pair)
    mov [fvar_tbl+8*3], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_null)
    mov [fvar_tbl+8*4], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_char)
    mov [fvar_tbl+8*5], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_string)
    mov [fvar_tbl+8*6], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_procedure)
    mov [fvar_tbl+8*7], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_symbol)
    mov [fvar_tbl+8*8], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
    mov [fvar_tbl+8*9], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
    mov [fvar_tbl+8*10], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
    mov [fvar_tbl+8*11], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
    mov [fvar_tbl+8*12], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
    mov [fvar_tbl+8*13], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
    mov [fvar_tbl+8*14], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
    mov [fvar_tbl+8*15], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_eq)
    mov [fvar_tbl+8*16], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_add)
    mov [fvar_tbl+8*17], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_mul)
    mov [fvar_tbl+8*18], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_sub)
    mov [fvar_tbl+8*19], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_div)
    mov [fvar_tbl+8*20], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_lt)
    mov [fvar_tbl+8*21], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_equ)
    mov [fvar_tbl+8*22], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
    mov [fvar_tbl+8*23], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
    mov [fvar_tbl+8*24], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
    mov [fvar_tbl+8*25], rax

user_code_fragment:
;;; The code you compiled will be catenated here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.

push 496351

mov rax, [fvar_tbl+25*8]
push rax
mov rax, [fvar_tbl+23*8]
push rax
mov rax, [fvar_tbl+27*8]
push rax
mov rax, [fvar_tbl+24*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
push 5
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_36
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_37
is_not_empty_36:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_38:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_38
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_40
params_loop_39:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_39
no_more_params_40:
is_empty_37:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_41)
jmp Lcont_42
Lcode_41:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_53
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_54
is_not_empty_53:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_55:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_55
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_57
params_loop_56:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_56
no_more_params_57:
is_empty_54:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_58)
jmp Lcont_59
Lcode_58:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_95
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_96
is_not_empty_95:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_97:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_97
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_99
params_loop_98:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_98
no_more_params_99:
is_empty_96:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_100)
jmp Lcont_101
Lcode_100:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 2
jne not_empty_opt_102
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_103
not_empty_opt_102:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 2; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_103
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_104:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 2; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 2;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_104
done_fixing_103:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_346 
 mov rax, const_tbl+4 
 jmp Lexit_346 
 Lelse_346: 
 push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_345 
 push 496351

push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 1
mov rax, qword [rbp+8*(4+0)]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_345 
 Lelse_345: 
 push 496351

push 496351

push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, [fvar_tbl+26*8]
push rax
push 4
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 3
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 Lexit_345:
 
 Lexit_346:

leave
ret
Lcont_101:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_59:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_42:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+26*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+27*8]
push rax
mov rax, [fvar_tbl+24*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
push 3
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_382
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_383
is_not_empty_382:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_384:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_384
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_386
params_loop_385:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_385
no_more_params_386:
is_empty_383:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_387)
jmp Lcont_388
Lcode_387:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_399
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_400
is_not_empty_399:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_401:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_401
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_403
params_loop_402:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_402
no_more_params_403:
is_empty_400:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_404)
jmp Lcont_405
Lcode_404:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_441
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_442
is_not_empty_441:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_443:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_443
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_445
params_loop_444:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_444
no_more_params_445:
is_empty_442:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_446)
jmp Lcont_447
Lcode_446:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_538 
 mov rax, qword [rbp+8*(4+1)] 
 jmp Lexit_538 
 Lelse_538: 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+1)]
push rax
push 2
mov rax, qword [rbp+8*(4+0)]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 3
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 Lexit_538:

leave
ret
Lcont_447:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_405:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_388:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+28*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_559
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_560
is_not_empty_559:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_561:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_561
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_563
params_loop_562:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_562
no_more_params_563:
is_empty_560:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_564)
jmp Lcont_565
Lcode_564:
push rbp
mov rbp, rsp
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, const_tbl+4
push rax
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_586
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_587
is_not_empty_586:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_588:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_588
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_590
params_loop_589:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_589
no_more_params_590:
is_empty_587:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_591)
jmp Lcont_592
Lcode_591:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword [rbp+8*(4+1)]
push rax
push 2
mov rax, [fvar_tbl+23*8]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_592:
push rax
push 3
mov rax, [fvar_tbl+28*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+2)]
push rax
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_623
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_624
is_not_empty_623:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_625:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_625
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_627
params_loop_626:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_626
no_more_params_627:
is_empty_624:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_628)
jmp Lcont_629
Lcode_628:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword [rbp+8*(4+1)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_629:
push rax
push 3
mov rax, [fvar_tbl+28*8]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_565:
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_655
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_656
is_not_empty_655:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_657:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_657
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_659
params_loop_658:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_658
no_more_params_659:
is_empty_656:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_660)
jmp Lcont_661
Lcode_660:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
leave
ret
Lcont_661:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+29*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+25*8]
push rax
mov rax, [fvar_tbl+23*8]
push rax
mov rax, [fvar_tbl+27*8]
push rax
mov rax, [fvar_tbl+24*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
push 5
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_702
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_703
is_not_empty_702:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_704:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_704
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_706
params_loop_705:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_705
no_more_params_706:
is_empty_703:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_707)
jmp Lcont_708
Lcode_707:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_719
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_720
is_not_empty_719:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_721:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_721
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_723
params_loop_722:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_722
no_more_params_723:
is_empty_720:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_724)
jmp Lcont_725
Lcode_724:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_761
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_762
is_not_empty_761:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_763:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_763
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_765
params_loop_764:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_764
no_more_params_765:
is_empty_762:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_766)
jmp Lcont_767
Lcode_766:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_768
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_769
not_empty_opt_768:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_769
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_770:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 1;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_770
done_fixing_769:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_836 
 mov rax, qword [rbp+8*(4+0)] 
 jmp Lexit_836 
 Lelse_836: 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 Lexit_836:

leave
ret
Lcont_767:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_725:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_708:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+30*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+23*8]
push rax
mov rax, [fvar_tbl+29*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
push 3
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_872
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_873
is_not_empty_872:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_874:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_874
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_876
params_loop_875:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_875
no_more_params_876:
is_empty_873:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_877)
jmp Lcont_878
Lcode_877:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_879
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_880
is_not_empty_879:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_881:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_881
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_883
params_loop_882:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_882
no_more_params_883:
is_empty_880:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_884)
jmp Lcont_885
Lcode_884:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 0
jne not_empty_opt_886
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_887
not_empty_opt_886:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 0; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_887
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_888:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 0; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 0;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_888
done_fixing_887:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+4
push rax
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_904
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_905
is_not_empty_904:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_906:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_906
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_908
params_loop_907:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_907
no_more_params_908:
is_empty_905:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_909)
jmp Lcont_910
Lcode_909:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_961 
 mov rax, qword [rbp+8*(4+0)] 
 jmp Lexit_961 
 Lelse_961: 
 push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]
push rax
push 3
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 Lexit_961:

leave
ret
Lcont_910:
push rax
push 3
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_885:
leave
ret
Lcont_878:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+31*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_972
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_973
is_not_empty_972:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_974:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_974
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_976
params_loop_975:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_975
no_more_params_976:
is_empty_973:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_977)
jmp Lcont_978
Lcode_977:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 0
jne not_empty_opt_979
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_980
not_empty_opt_979:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 0; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_980
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_981:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 0; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 0;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_981
done_fixing_980:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
leave
ret
Lcont_978:
mov qword[fvar_tbl+32*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+27*8]
push rax
mov rax, [fvar_tbl+3*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
push 3
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1012
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1013
is_not_empty_1012:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1014:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1014
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1016
params_loop_1015:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1015
no_more_params_1016:
is_empty_1013:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1017)
jmp Lcont_1018
Lcode_1017:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1029
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1030
is_not_empty_1029:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1031:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1031
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1033
params_loop_1032:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1032
no_more_params_1033:
is_empty_1030:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1034)
jmp Lcont_1035
Lcode_1034:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1046
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1047
is_not_empty_1046:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1048:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1048
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1050
params_loop_1049:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1049
no_more_params_1050:
is_empty_1047:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1051)
jmp Lcont_1052
Lcode_1051:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_1058 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_1124 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 1
mov rax, [fvar_tbl+33*8]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_1124 
 Lelse_1124: 
 mov rax, const_tbl+2 
 Lexit_1124:

Lexit_1058:

leave
ret
Lcont_1052:
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
leave
ret
Lcont_1035:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1018:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+33*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+17*8]
push rax
mov rax, [fvar_tbl+28*8]
push rax
push 2
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1150
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1151
is_not_empty_1150:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1152:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1152
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1154
params_loop_1153:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1153
no_more_params_1154:
is_empty_1151:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1155)
jmp Lcont_1156
Lcode_1155:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1157
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1158
is_not_empty_1157:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1159:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1159
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1161
params_loop_1160:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1160
no_more_params_1161:
is_empty_1158:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1162)
jmp Lcont_1163
Lcode_1162:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+41
push rax
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1179
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1180
is_not_empty_1179:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1181:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1181
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1183
params_loop_1182:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1182
no_more_params_1183:
is_empty_1180:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1184)
jmp Lcont_1185
Lcode_1184:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+6
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1185:
push rax
push 3
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1163:
leave
ret
Lcont_1156:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+34*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+12*8]
push rax
mov rax, [fvar_tbl+24*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
push 3
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1236
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1237
is_not_empty_1236:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1238:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1238
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1240
params_loop_1239:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1239
no_more_params_1240:
is_empty_1237:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1241)
jmp Lcont_1242
Lcode_1241:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1243
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1244
is_not_empty_1243:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1245:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1245
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1247
params_loop_1246:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1246
no_more_params_1247:
is_empty_1244:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1248)
jmp Lcont_1249
Lcode_1248:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_1250
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1251
not_empty_opt_1250:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1251
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1252:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 1;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1252
done_fixing_1251:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_1323 
 push 496351

mov rax, const_tbl+50
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_1323 
 Lelse_1323: 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 Lexit_1323:

leave
ret
Lcont_1249:
leave
ret
Lcont_1242:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+12*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1329
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1330
is_not_empty_1329:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1331:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1331
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1333
params_loop_1332:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1332
no_more_params_1333:
is_empty_1330:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1334)
jmp Lcont_1335
Lcode_1334:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)] 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_1356 
 mov rax, const_tbl+2 
 jmp Lexit_1356 
 Lelse_1356: 
 mov rax, const_tbl+0 
 Lexit_1356:

leave
ret
Lcont_1335:
mov qword[fvar_tbl+35*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+2*8]
push rax
mov rax, [fvar_tbl+1*8]
push rax
push 2
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1377
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1378
is_not_empty_1377:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1379:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1379
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1381
params_loop_1380:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1380
no_more_params_1381:
is_empty_1378:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1382)
jmp Lcont_1383
Lcode_1382:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1384
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1385
is_not_empty_1384:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1386:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1386
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1388
params_loop_1387:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1387
no_more_params_1388:
is_empty_1385:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1389)
jmp Lcont_1390
Lcode_1389:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_1396 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_1396:

leave
ret
Lcont_1390:
leave
ret
Lcont_1383:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+36*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+17*8]
push rax
mov rax, [fvar_tbl+28*8]
push rax
push 2
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1447
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1448
is_not_empty_1447:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1449:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1449
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1451
params_loop_1450:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1450
no_more_params_1451:
is_empty_1448:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1452)
jmp Lcont_1453
Lcode_1452:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1454
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1455
is_not_empty_1454:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1456:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1456
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1458
params_loop_1457:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1457
no_more_params_1458:
is_empty_1455:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1459)
jmp Lcont_1460
Lcode_1459:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 0
jne not_empty_opt_1461
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1462
not_empty_opt_1461:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 0; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1462
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1463:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 0; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 0;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1463
done_fixing_1462:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+41
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]
push rax
push 3
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1460:
leave
ret
Lcont_1453:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+17*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+18*8]
push rax
mov rax, [fvar_tbl+28*8]
push rax
push 2
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1509
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1510
is_not_empty_1509:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1511:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1511
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1513
params_loop_1512:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1512
no_more_params_1513:
is_empty_1510:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1514)
jmp Lcont_1515
Lcode_1514:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1516
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1517
is_not_empty_1516:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1518:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1518
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1520
params_loop_1519:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1519
no_more_params_1520:
is_empty_1517:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1521)
jmp Lcont_1522
Lcode_1521:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 0
jne not_empty_opt_1523
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1524
not_empty_opt_1523:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 0; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1524
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1525:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 0; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 0;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1525
done_fixing_1524:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+6
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]
push rax
push 3
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1522:
leave
ret
Lcont_1515:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+18*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+4*8]
push rax
mov rax, [fvar_tbl+17*8]
push rax
mov rax, [fvar_tbl+19*8]
push rax
mov rax, [fvar_tbl+25*8]
push rax
push 4
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1581
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1582
is_not_empty_1581:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1583:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1583
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1585
params_loop_1584:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1584
no_more_params_1585:
is_empty_1582:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1586)
jmp Lcont_1587
Lcode_1586:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1588
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1589
is_not_empty_1588:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1590:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1590
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1592
params_loop_1591:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1591
no_more_params_1592:
is_empty_1589:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1593)
jmp Lcont_1594
Lcode_1593:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_1595
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1596
not_empty_opt_1595:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1596
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1597:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 1;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1597
done_fixing_1596:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_1673 
 push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+41
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_1673 
 Lelse_1673: 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*2]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 Lexit_1673:

leave
ret
Lcont_1594:
leave
ret
Lcont_1587:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+19*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+4*8]
push rax
mov rax, [fvar_tbl+18*8]
push rax
mov rax, [fvar_tbl+20*8]
push rax
mov rax, [fvar_tbl+25*8]
push rax
push 4
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1704
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1705
is_not_empty_1704:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1706:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1706
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1708
params_loop_1707:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1707
no_more_params_1708:
is_empty_1705:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1709)
jmp Lcont_1710
Lcode_1709:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1711
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1712
is_not_empty_1711:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1713:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1713
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1715
params_loop_1714:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1714
no_more_params_1715:
is_empty_1712:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1716)
jmp Lcont_1717
Lcode_1716:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_1718
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1719
not_empty_opt_1718:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1719
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1720:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 1;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1720
done_fixing_1719:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_1796 
 push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+6
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_1796 
 Lelse_1796: 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*2]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 Lexit_1796:

leave
ret
Lcont_1717:
leave
ret
Lcont_1710:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+20*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+25*8]
push rax
mov rax, [fvar_tbl+27*8]
push rax
mov rax, [fvar_tbl+24*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
mov rax, [fvar_tbl+22*8]
push rax
push 5
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1832
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1833
is_not_empty_1832:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1834:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1834
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1836
params_loop_1835:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1835
no_more_params_1836:
is_empty_1833:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1837)
jmp Lcont_1838
Lcode_1837:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1849
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1850
is_not_empty_1849:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1851:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1851
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1853
params_loop_1852:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1852
no_more_params_1853:
is_empty_1850:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1854)
jmp Lcont_1855
Lcode_1854:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1891
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1892
is_not_empty_1891:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1893:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1893
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1895
params_loop_1894:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_1894
no_more_params_1895:
is_empty_1892:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1896)
jmp Lcont_1897
Lcode_1896:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_1898
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1899
not_empty_opt_1898:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1899
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1900:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 1;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1900
done_fixing_1899:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_2007 
 mov rax, const_tbl+0 
 jmp Lexit_2007 
 Lelse_2007: 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_2006 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]
push rax
push 3
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_2006 
 Lelse_2006: 
 mov rax, const_tbl+2 
 Lexit_2006:
 
 Lexit_2007:

leave
ret
Lcont_1897:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_1855:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1838:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+22*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+27*8]
push rax
mov rax, [fvar_tbl+24*8]
push rax
mov rax, [fvar_tbl+21*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
push 4
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2048
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2049
is_not_empty_2048:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2050:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2050
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2052
params_loop_2051:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2051
no_more_params_2052:
is_empty_2049:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2053)
jmp Lcont_2054
Lcode_2053:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2065
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2066
is_not_empty_2065:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2067:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2067
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2069
params_loop_2068:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2068
no_more_params_2069:
is_empty_2066:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2070)
jmp Lcont_2071
Lcode_2070:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2107
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2108
is_not_empty_2107:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2109:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2109
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2111
params_loop_2110:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2110
no_more_params_2111:
is_empty_2108:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2112)
jmp Lcont_2113
Lcode_2112:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_2225 
 mov rax, const_tbl+0 
 jmp Lexit_2225 
 Lelse_2225: 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_2224 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_2224 
 Lelse_2224: 
 mov rax, const_tbl+2 
 Lexit_2224:
 
 Lexit_2225:

leave
ret
Lcont_2113:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2226
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2227
is_not_empty_2226:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2228:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2228
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2230
params_loop_2229:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2229
no_more_params_2230:
is_empty_2227:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2231)
jmp Lcont_2232
Lcode_2231:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_2233
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_2234
not_empty_opt_2233:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_2234
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_2235:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 1;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_2235
done_fixing_2234:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2232:
leave
ret
Lcont_2071:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2054:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+21*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+27*8]
push rax
mov rax, [fvar_tbl+24*8]
push rax
mov rax, [fvar_tbl+35*8]
push rax
mov rax, [fvar_tbl+22*8]
push rax
mov rax, [fvar_tbl+21*8]
push rax
mov rax, [fvar_tbl+4*8]
push rax
push 6
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2301
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2302
is_not_empty_2301:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2303:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2303
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2305
params_loop_2304:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2304
no_more_params_2305:
is_empty_2302:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2306)
jmp Lcont_2307
Lcode_2306:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2318
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2319
is_not_empty_2318:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2320:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2320
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2322
params_loop_2321:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2321
no_more_params_2322:
is_empty_2319:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2323)
jmp Lcont_2324
Lcode_2323:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2360
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2361
is_not_empty_2360:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2362:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2362
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2364
params_loop_2363:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2363
no_more_params_2364:
is_empty_2361:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2365)
jmp Lcont_2366
Lcode_2365:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_2524 
 mov rax, const_tbl+0 
 jmp Lexit_2524 
 Lelse_2524: 
 push 496351

push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_2407 
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_2407:

push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_2523 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*5]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_2523 
 Lelse_2523: 
 mov rax, const_tbl+2 
 Lexit_2523:
 
 Lexit_2524:

leave
ret
Lcont_2366:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2525
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2526
is_not_empty_2525:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2527:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2527
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2529
params_loop_2528:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2528
no_more_params_2529:
is_empty_2526:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2530)
jmp Lcont_2531
Lcode_2530:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_2532
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_2533
not_empty_opt_2532:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_2533
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_2534:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rbx, 1;n
add rbx, 3; n+3
add rbx, rcx;n+3+curr_m
dec rbx; because the last opttion param have been consumed
shl rbx, 3
call memmove
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_2534
done_fixing_2533:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2531:
leave
ret
Lcont_2324:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2307:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+37*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+22*8]
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2575
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2576
is_not_empty_2575:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2577:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2577
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2579
params_loop_2578:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2578
no_more_params_2579:
is_empty_2576:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2580)
jmp Lcont_2581
Lcode_2580:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2582
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2583
is_not_empty_2582:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2584:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2584
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2586
params_loop_2585:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2585
no_more_params_2586:
is_empty_2583:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2587)
jmp Lcont_2588
Lcode_2587:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+41
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2588:
leave
ret
Lcont_2581:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+38*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+19*8]
push rax
mov rax, [fvar_tbl+21*8]
push rax
mov rax, [fvar_tbl+9*8]
push rax
mov rax, [fvar_tbl+10*8]
push rax
push 4
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2639
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2640
is_not_empty_2639:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2641:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2641
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2643
params_loop_2642:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2642
no_more_params_2643:
is_empty_2640:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2644)
jmp Lcont_2645
Lcode_2644:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2646
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2647
is_not_empty_2646:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2648:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2648
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2650
params_loop_2649:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2649
no_more_params_2650:
is_empty_2647:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2651)
jmp Lcont_2652
Lcode_2651:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2663
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2664
is_not_empty_2663:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2665:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2665
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2667
params_loop_2666:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2666
no_more_params_2667:
is_empty_2664:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2668)
jmp Lcont_2669
Lcode_2668:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2705
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2706
is_not_empty_2705:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2707:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2707
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2709
params_loop_2708:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2708
no_more_params_2709:
is_empty_2706:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2710)
jmp Lcont_2711
Lcode_2710:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+41
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*2]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_2812 
 mov rax, qword [rbp+8*(4+1)] 
 jmp Lexit_2812 
 Lelse_2812: 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*2]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, [fvar_tbl+23*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, const_tbl+6
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*2]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 Lexit_2812:

leave
ret
Lcont_2711:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
push 496351

mov rax, const_tbl+4
push rax
push 496351

mov rax, const_tbl+6
push rax
push 496351

mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2669:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2652:
leave
ret
Lcont_2645:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+39*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, [fvar_tbl+14*8]
push rax
mov rax, [fvar_tbl+27*8]
push rax
mov rax, [fvar_tbl+24*8]
push rax
mov rax, [fvar_tbl+16*8]
push rax
mov rax, [fvar_tbl+6*8]
push rax
mov rax, [fvar_tbl+5*8]
push rax
mov rax, [fvar_tbl+3*8]
push rax
mov rax, [fvar_tbl+1*8]
push rax
mov rax, [fvar_tbl+2*8]
push rax
mov rax, [fvar_tbl+39*8]
push rax
mov rax, [fvar_tbl+22*8]
push rax
push 11
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2928
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2929
is_not_empty_2928:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2930:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2930
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2932
params_loop_2931:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2931
no_more_params_2932:
is_empty_2929:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2933)
jmp Lcont_2934
Lcode_2933:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2945
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2946
is_not_empty_2945:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2947:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2947
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2949
params_loop_2948:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2948
no_more_params_2949:
is_empty_2946:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2950)
jmp Lcont_2951
Lcode_2950:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2987
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2988
is_not_empty_2987:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2989:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2989
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2991
params_loop_2990:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_2990
no_more_params_2991:
is_empty_2988:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2992)
jmp Lcont_2993
Lcode_2992:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3071 
 push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3065 
 push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_3065 
 Lelse_3065: 
 mov rax, const_tbl+2 
 Lexit_3065:
 
 jmp Lexit_3071 
 Lelse_3071: 
 mov rax, const_tbl+2 
 Lexit_3071:

cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_2999 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3143 
 push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3137 
 push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_3137 
 Lelse_3137: 
 mov rax, const_tbl+2 
 Lexit_3137:
 
 jmp Lexit_3143 
 Lelse_3143: 
 mov rax, const_tbl+2 
 Lexit_3143:

cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_2999 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3296 
 push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3290 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3284 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*9]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*9]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_3284 
 Lelse_3284: 
 mov rax, const_tbl+2 
 Lexit_3284:
 
 jmp Lexit_3290 
 Lelse_3290: 
 mov rax, const_tbl+2 
 Lexit_3290:
 
 jmp Lexit_3296 
 Lelse_3296: 
 mov rax, const_tbl+2 
 Lexit_3296:

cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_2999 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*5]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3388 
 push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*5]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3382 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*10]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*10]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_3382 
 Lelse_3382: 
 mov rax, const_tbl+2 
 Lexit_3382:
 
 jmp Lexit_3388 
 Lelse_3388: 
 mov rax, const_tbl+2 
 Lexit_3388:

cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_2999 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*6]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3485 
 push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*6]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 cmp rax, SOB_FALSE_ADDRESS 
 je Lelse_3479 
 push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx 
 jmp Lexit_3479 
 Lelse_3479: 
 mov rax, const_tbl+2 
 Lexit_3479:
 
 jmp Lexit_3485 
 Lelse_3485: 
 mov rax, const_tbl+2 
 Lexit_3485:

cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_2999 
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*7]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_2999:

leave
ret
Lcont_2993:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_2951:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2934:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+40*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

push 496351

mov rax, const_tbl+6
push rax
push 1
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_3531
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_3532
is_not_empty_3531:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_3533:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_3533
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_3535
params_loop_3534:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_3534
no_more_params_3535:
is_empty_3532:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_3536)
jmp Lcont_3537
Lcode_3536:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_3543
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_3544
is_not_empty_3543:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_3545:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_3545
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_3547
params_loop_3546:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi], rsi
loop params_loop_3546
no_more_params_3547:
is_empty_3544:
mov qword[rdx], rbx
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_3548)
jmp Lcont_3549
Lcode_3548:
push rbp
mov rbp, rsp
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
leave
ret
Lcont_3549:
mov rax, const_tbl+6
leave
ret
Lcont_3537:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, const_tbl+6
push rax
push 2
mov rax, [fvar_tbl+17*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
	call write_sob_if_not_void

	mov rax, 0
	add rsp, 4*8
	pop rbp
	ret

apply:
;;; (apply proc x0 ... xn-1 s)
;;; s id s_0 .. s_m-1

;;; TODO: add closure verification
	push rbp
	mov rbp, rsp
	mov rbx, qword[rbp]
	mov rsi, qword[rbx -2*8]	; rsi is s
	mov rdi, 0		;the length of s
push_s_loop:
	cmp rsi, SOB_NIL_ADDRESS
	je end_push_s
	inc rdi
	CAR rbx, rsi
	push rbx
	CDR rsi, rsi
	jmp push_s_loop
end_push_s:
;;; s0 ... sm-1 on the stack
	cmp rdi, 0
	je reverse_s_end
	mov rcx, rdi
	cmp rcx ,1
	jbe reverse_s_end
	shr rcx,1 		;rcx is m/2
reverse_s_loop:
	mov rdx, rcx
	dec rdx			    ;rdx is the index (e.g 0 based)
	mov rbx, qword[rsp + rdx*8] ;rbx is s_i
	mov r8, rdi
	dec r8			  ;r8 is the index of le last elemnt
	sub r8, rdx		;m-i
	mov r9, qword[rsp + r8*8] ; r9 is s_m-i
	mov qword[rsp + rdx*8], r9 
	mov qword[rsp + r8*8], rbx
	loop reverse_s_loop
reverse_s_end:
	mov rcx, qword[rbp+8*3]
	sub rcx, 2		;rdx is n
	mov rsi, rcx		;save it for later
	cmp rsi, 0
	je no_params
push_xs_loop:
	mov rdx, rcx
	dec rdx			;rdx is index
	add rdx, 5		;5  and not for because the first parameter is proc
	push qword[rbp +8*rdx]
	loop push_xs_loop
no_params:	
;;; s_m-1,..,s_0, x_n-1,..x_0 on the stack
	add rdi, rsi		  ;m+n
	push rdi
	mov rbx, qword[rbp + 8*4] ; rbx is proc
;;; verify that proc is (i.e rbx) a closue
	CLOSURE_ENV rdx, rbx
	push rdx
	mov r8, rbx		;save the closure
	push qword[rbp+8]	;ret address
	mov rdx, rsp 		;this is the start of the to be transferred memmory slice
	push r8
	mov rbx, rdi		;cacl memmory length
	add rbx, ELEMENTS_ON_STACK_NO_RBP ;;cacl memmory length
	shl rbx, 3
	mov rbp, qword[rbp]	;current rbp is no longer needed and old rbp need to be accesibl
	mov rsi, rbp
	sub rsi, rbx		;destination of moving
	mov rax, 0
	;; push rbx		;size of memmory to be moved
	;; push rdx		;start of memmory to be moved
	;; push rsi		;destination
	mov rdi, rsi
	mov rsi, rdx
	mov rdx, rbx
	call memmove
	pop rbx			;proc
	mov rsp, rax
	CLOSURE_CODE rdx, rbx
	jmp rdx
	

	
	
	
	
	
	
	
cons:
	push rbp
	mov rbp, rsp
	GET_ARG rsi, 0
	GET_ARG rdx, 1
	MAKE_PAIR(rax, rsi, rdx)
	leave
	ret
car:
	push rbp
	mov rbp, rsp
	GET_ARG rsi, 0
	CAR rax, rsi
	leave
	ret
is_boolean:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_BOOL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_float:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_FLOAT
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_integer:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_INTEGER
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_pair:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_PAIR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_null:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_NIL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_char:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CHAR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_string:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_STRING
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_procedure:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CLOSURE
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_symbol:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_SYMBOL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

string_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    STRING_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

string_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov sil, byte [rsi]
    MAKE_CHAR(rax, sil)

    leave
    ret

string_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov rax, PVAR(2)
    CHAR_VAL rax, rax
    mov byte [rsi], al
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    CHAR_VAL rdi, rdi
    and rdi, 255

    MAKE_STRING rax, rsi, dil

    leave
    ret

symbol_to_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    SYMBOL_VAL rsi, rsi
    
    STRING_LENGTH rcx, rsi
    STRING_ELEMENTS rdi, rsi

    push rcx
    push rdi

    mov dil, byte [rdi]
    MAKE_CHAR(rax, dil)
    push rax
    MAKE_INT(rax, rcx)
    push rax
    push 2
    push SOB_NIL_ADDRESS
    call make_string
    add rsp, 4*8

    STRING_ELEMENTS rsi, rax

    pop rdi
    pop rcx

    cmp rcx, 0
    je .end
	
.loop:
    lea r8, [rdi+rcx]
    lea r9, [rsi+rcx]

    mov bl, byte [r8]
    mov byte [r9], bl
    
    loop .loop
.end:

    leave
    ret

char_to_integer:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    CHAR_VAL rsi, rsi
    and rsi, 255
    MAKE_INT(rax, rsi)

    leave
    ret

integer_to_char:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    and rsi, 255
    MAKE_CHAR(rax, sil)

    leave
    ret

is_eq:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    cmp rsi, rdi
    je .true
    mov rax, SOB_FALSE_ADDRESS
    jmp .return

.true:
    mov rax, SOB_TRUE_ADDRESS

.return:
    leave
    ret

bin_add:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    addsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_mul:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    mulsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_sub:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    subsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_div:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    divsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_lt:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpltsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

bin_equ:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpeqsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret


