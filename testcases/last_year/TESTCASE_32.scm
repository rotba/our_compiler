(define (not x) (if x #f #t))
(and
 (boolean? #t)
 (boolean? #f)
 (not (boolean? 1234))
 (not (boolean? 'a))
 (symbol? 'b)
 (procedure? procedure?)
 (eq? (let ((x 0)) (set! x 1)) (if #f 1))
 (= (car (cons 1 2)) 1.0)
 (float? 1234.0)
 (char? #\a)
 (null? '())
 (string? "abc")
 (symbol? 'lambda)
 (vector? '#(1 2 3))
 (not (vector? 1234))
 (not (string? '#(a b c)))
 (not (string? 1234))
 (not (float? (vector-length '#(a #t ()))))
 (pair? `(a . b))
 (not (pair? '()))
 (apply zero? '(0))
 (list? (apply list 'a 'b 'c '(d e f)))
 (= (char->integer #\a) (char->integer (string-ref "abc" 0)))
 (let ((n 10000))
   (= n (string-length (make-string n))))
 (let ((n 1))
    (let* ((n 10000)
           (m n))
        (= n (vector-length (make-vector m)))))
 (letrec ((f (lambda () (cons #t f)))) 
    (and (car (f)) (car ((cdr (f))))))
 (= 3.5 (/ 7.0 2))
 (= 35.0 (/ 7e1 2 ...
 
