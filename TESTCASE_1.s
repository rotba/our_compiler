
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1

section .data
const_tbl:
MAKE_BOOL(1)
MAKE_BOOL(0)
MAKE_NIL
MAKE_VOID
MAKE_LITERAL_INT(1)
MAKE_LITERAL_STRING "whatever", 8
MAKE_LITERAL_SYMBOl(const_tbl+15)
MAKE_LITERAL_INT(0)
MAKE_LITERAL_CHAR (0)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+5
%define SOB_NIL_ADDRESS const_tbl+4
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+0

fvar_tbl:
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED

global main
extern memmove
section .text
main:
    push rbp

    ;; set up the heap
    mov rdi, GB(4)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push SOB_NIL_ADDRESS
    push -1
    push rsp
    mov rbp,rsp

    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_boolean)
    mov [fvar_tbl+8*0], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_float)
    mov [fvar_tbl+8*1], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_integer)
    mov [fvar_tbl+8*2], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_pair)
    mov [fvar_tbl+8*3], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_null)
    mov [fvar_tbl+8*4], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_char)
    mov [fvar_tbl+8*5], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_string)
    mov [fvar_tbl+8*6], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_procedure)
    mov [fvar_tbl+8*7], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_symbol)
    mov [fvar_tbl+8*8], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
    mov [fvar_tbl+8*9], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
    mov [fvar_tbl+8*10], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
    mov [fvar_tbl+8*11], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
    mov [fvar_tbl+8*12], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
    mov [fvar_tbl+8*13], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
    mov [fvar_tbl+8*14], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
    mov [fvar_tbl+8*15], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_eq)
    mov [fvar_tbl+8*16], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_add)
    mov [fvar_tbl+8*17], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_mul)
    mov [fvar_tbl+8*18], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_sub)
    mov [fvar_tbl+8*19], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_div)
    mov [fvar_tbl+8*20], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_lt)
    mov [fvar_tbl+8*21], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_equ)
    mov [fvar_tbl+8*22], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
    mov [fvar_tbl+8*23], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
    mov [fvar_tbl+8*24], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
    mov [fvar_tbl+8*25], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
    mov [fvar_tbl+8*28], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
    mov [fvar_tbl+8*26], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
    mov [fvar_tbl+8*27], rax

user_code_fragment:
;;; The code you compiled will be catenated here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.

push 496351

mov rax, qword[fvar_tbl+28*8]
push rax
mov rax, qword[fvar_tbl+23*8]
push rax
mov rax, qword[fvar_tbl+25*8]
push rax
mov rax, qword[fvar_tbl+24*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
push 5
;(LambdaSimple'(  ( null? , car , cdr , cons , apply ) , [ApplicTP'( (LambdaSimple'(  ( map-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( map-loop , 0 )) , (Box'( VarParam ( map-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( map-loop , 0 ) , (LambdaOpt'(  ( f , l . ls ), , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] ) , Const' ( Nil),(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( ls , 2 ))] ) , ApplicTP'( Var' ( VarBound ( cons , 1 , 1 )) , [Applic'( Var' ( VarParam ( f , 0 )) , [Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] )] ) , Applic'( (BoxGet'( VarBound ( map-loop , 0 , 0 ) ) , [Var' ( VarParam ( f , 0 )) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] )] )] ),ApplicTP'( Var' ( VarBound ( cons , 1 , 1 )) , [Applic'( Var' ( VarBound ( apply , 1 , 1 )) , [Var' ( VarParam ( f , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] ) , Applic'( (BoxGet'( VarBound ( map-loop , 0 , 0 ) ) , [Var' ( VarBound ( car , 1 , 1 )) , Var' ( VarParam ( ls , 2 ))] )] ) , Applic'( Var' ( VarBound ( apply , 1 , 1 )) , [Var' ( VarFree ( map )) , Var' ( VarParam ( f , 0 )) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] ) , Applic'( (BoxGet'( VarBound ( map-loop , 0 , 0 ) ) , [Var' ( VarBound ( cdr , 1 , 1 )) , Var' ( VarParam ( ls , 2 ))] )] )] ) ) )] ) ) , (BoxGet'( VarParam ( map-loop , 0 ) )] )] )] ) , [Const' ( Symbol(whatever))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_36
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_37
is_not_empty_36:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_38:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_38
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_40
params_loop_39:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_39
no_more_params_40:
mov qword[rdx], rbx
is_empty_37:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_41)
jmp Lcont_42
Lcode_41:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( map-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( map-loop , 0 )) , (Box'( VarParam ( map-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( map-loop , 0 ) , (LambdaOpt'(  ( f , l . ls ), , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] ) , Const' ( Nil),(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( ls , 2 ))] ) , ApplicTP'( Var' ( VarBound ( cons , 1 , 1 )) , [Applic'( Var' ( VarParam ( f , 0 )) , [Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] )] ) , Applic'( (BoxGet'( VarBound ( map-loop , 0 , 0 ) ) , [Var' ( VarParam ( f , 0 )) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] )] )] ),ApplicTP'( Var' ( VarBound ( cons , 1 , 1 )) , [Applic'( Var' ( VarBound ( apply , 1 , 1 )) , [Var' ( VarParam ( f , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] ) , Applic'( (BoxGet'( VarBound ( map-loop , 0 , 0 ) ) , [Var' ( VarBound ( car , 1 , 1 )) , Var' ( VarParam ( ls , 2 ))] )] ) , Applic'( Var' ( VarBound ( apply , 1 , 1 )) , [Var' ( VarFree ( map )) , Var' ( VarParam ( f , 0 )) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] ) , Applic'( (BoxGet'( VarBound ( map-loop , 0 , 0 ) ) , [Var' ( VarBound ( cdr , 1 , 1 )) , Var' ( VarParam ( ls , 2 ))] )] )] ) ) )] ) ) , (BoxGet'( VarParam ( map-loop , 0 ) )] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_53
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_54
is_not_empty_53:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_55:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_55
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_57
params_loop_56:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_56
no_more_params_57:
mov qword[rdx], rbx
is_empty_54:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_58)
jmp Lcont_59
Lcode_58:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_95
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_96
is_not_empty_95:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_97:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_97
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_99
params_loop_98:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_98
no_more_params_99:
mov qword[rdx], rbx
is_empty_96:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_100)
jmp Lcont_101
Lcode_100:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 2
jne not_empty_opt_102
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_103
not_empty_opt_102:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 2; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_103
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_104:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 2; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 2;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_104
done_fixing_103:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_347
mov rax, const_tbl+4
jmp Lexit_348
Lelse_347:
push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_345
push 496351

push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;(BoxGet'( VarBound ( map-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 1
;Var' ( VarParam ( f , 0 ))
mov rax, qword [rbp+8*(4+0)]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;Var' ( VarBound ( cons , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_346
Lelse_345:
push 496351

push 496351

push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]
push rax
push 2
;(BoxGet'( VarBound ( map-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword[fvar_tbl+29*8]
push rax
push 4
;Var' ( VarBound ( apply , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]
push rax
push 2
;(BoxGet'( VarBound ( map-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 3
;Var' ( VarBound ( apply , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;Var' ( VarBound ( cons , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_346:
Lexit_348:
leave
ret
Lcont_101:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_59:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_42:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+29*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+25*8]
push rax
mov rax, qword[fvar_tbl+24*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
push 3
;(LambdaSimple'(  ( null? , car , cdr ) , [ApplicTP'( (LambdaSimple'(  ( fold-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( fold-loop , 0 )) , (Box'( VarParam ( fold-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( fold-loop , 0 ) , (LambdaSimple'(  ( f , acc , l ) , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( l , 2 ))] ) , Var' ( VarParam ( acc , 1 )),ApplicTP'( (BoxGet'( VarBound ( fold-loop , 0 , 0 ) ) , [Var' ( VarParam ( f , 0 )) , Applic'( Var' ( VarParam ( f , 0 )) , [Var' ( VarParam ( acc , 1 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( l , 2 ))] )] ) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( l , 2 ))] )] ) )] ) ) , (BoxGet'( VarParam ( fold-loop , 0 ) )] )] )] ) , [Const' ( Symbol(whatever))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_384
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_385
is_not_empty_384:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_386:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_386
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_388
params_loop_387:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_387
no_more_params_388:
mov qword[rdx], rbx
is_empty_385:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_389)
jmp Lcont_390
Lcode_389:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( fold-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( fold-loop , 0 )) , (Box'( VarParam ( fold-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( fold-loop , 0 ) , (LambdaSimple'(  ( f , acc , l ) , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( l , 2 ))] ) , Var' ( VarParam ( acc , 1 )),ApplicTP'( (BoxGet'( VarBound ( fold-loop , 0 , 0 ) ) , [Var' ( VarParam ( f , 0 )) , Applic'( Var' ( VarParam ( f , 0 )) , [Var' ( VarParam ( acc , 1 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( l , 2 ))] )] ) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( l , 2 ))] )] ) )] ) ) , (BoxGet'( VarParam ( fold-loop , 0 ) )] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_401
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_402
is_not_empty_401:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_403:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_403
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_405
params_loop_404:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_404
no_more_params_405:
mov qword[rdx], rbx
is_empty_402:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_406)
jmp Lcont_407
Lcode_406:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_443
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_444
is_not_empty_443:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_445:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_445
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_447
params_loop_446:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_446
no_more_params_447:
mov qword[rdx], rbx
is_empty_444:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_448)
jmp Lcont_449
Lcode_448:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_540
mov rax, qword [rbp+8*(4+1)]
jmp Lexit_541
Lelse_540:
push 496351

push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

push 496351

mov rax, qword [rbp+8*(4+2)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+1)]
push rax
push 2
;Var' ( VarParam ( f , 0 ))
mov rax, qword [rbp+8*(4+0)]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 3
;(BoxGet'( VarBound ( fold-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_541:
leave
ret
Lcont_449:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_407:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_390:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+30*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_562
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_563
is_not_empty_562:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_564:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_564
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_566
params_loop_565:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_565
no_more_params_566:
mov qword[rdx], rbx
is_empty_563:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_567)
jmp Lcont_568
Lcode_567:
push rbp
mov rbp, rsp
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, const_tbl+4
push rax
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_589
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_590
is_not_empty_589:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_591:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_591
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_593
params_loop_592:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_592
no_more_params_593:
mov qword[rdx], rbx
is_empty_590:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_594)
jmp Lcont_595
Lcode_594:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword [rbp+8*(4+1)]
push rax
push 2
;Var' ( VarFree ( cons ))
mov rax, qword[fvar_tbl+23*8]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_595:
push rax
push 3
;Var' ( VarFree ( fold-left ))
mov rax, qword[fvar_tbl+30*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+2)]
push rax
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_626
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_627
is_not_empty_626:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_628:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_628
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_630
params_loop_629:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_629
no_more_params_630:
mov qword[rdx], rbx
is_empty_627:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_631)
jmp Lcont_632
Lcode_631:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword [rbp+8*(4+1)]
push rax
push 2
;Var' ( VarBound ( f , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_632:
push rax
push 3
;Var' ( VarFree ( fold-left ))
mov rax, qword[fvar_tbl+30*8]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_568:
push rax
push 1
;(LambdaSimple'(  ( fold-right-imp ) , [Var' ( VarParam ( fold-right-imp , 0 ))] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_658
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_659
is_not_empty_658:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_660:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_660
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_662
params_loop_661:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_661
no_more_params_662:
mov qword[rdx], rbx
is_empty_659:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_663)
jmp Lcont_664
Lcode_663:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
leave
ret
Lcont_664:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+31*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+28*8]
push rax
mov rax, qword[fvar_tbl+23*8]
push rax
mov rax, qword[fvar_tbl+25*8]
push rax
mov rax, qword[fvar_tbl+24*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
push 5
;(LambdaSimple'(  ( null? , car , cdr , cons , apply ) , [ApplicTP'( (LambdaSimple'(  ( cons-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( cons-loop , 0 )) , (Box'( VarParam ( cons-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( cons-loop , 0 ) , (LambdaOpt'(  ( x . l ), , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] ) , Var' ( VarParam ( x , 0 )),ApplicTP'( Var' ( VarBound ( cons , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( apply , 1 , 1 )) , [(BoxGet'( VarBound ( cons-loop , 0 , 0 ) ) , Var' ( VarParam ( l , 1 ))] )] ) )] ) ) , (BoxGet'( VarParam ( cons-loop , 0 ) )] )] )] ) , [Const' ( Symbol(whatever))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_705
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_706
is_not_empty_705:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_707:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_707
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_709
params_loop_708:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_708
no_more_params_709:
mov qword[rdx], rbx
is_empty_706:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_710)
jmp Lcont_711
Lcode_710:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( cons-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( cons-loop , 0 )) , (Box'( VarParam ( cons-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( cons-loop , 0 ) , (LambdaOpt'(  ( x . l ), , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( l , 1 ))] ) , Var' ( VarParam ( x , 0 )),ApplicTP'( Var' ( VarBound ( cons , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( apply , 1 , 1 )) , [(BoxGet'( VarBound ( cons-loop , 0 , 0 ) ) , Var' ( VarParam ( l , 1 ))] )] ) )] ) ) , (BoxGet'( VarParam ( cons-loop , 0 ) )] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_722
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_723
is_not_empty_722:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_724:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_724
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_726
params_loop_725:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_725
no_more_params_726:
mov qword[rdx], rbx
is_empty_723:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_727)
jmp Lcont_728
Lcode_727:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_764
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_765
is_not_empty_764:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_766:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_766
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_768
params_loop_767:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_767
no_more_params_768:
mov qword[rdx], rbx
is_empty_765:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_769)
jmp Lcont_770
Lcode_769:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_771
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_772
not_empty_opt_771:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_772
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_773:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 1;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_773
done_fixing_772:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_839
mov rax, qword [rbp+8*(4+0)]
jmp Lexit_840
Lelse_839:
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]
push rax
push 2
;Var' ( VarBound ( apply , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( cons , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_840:
leave
ret
Lcont_770:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_728:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_711:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+32*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+23*8]
push rax
mov rax, qword[fvar_tbl+31*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
push 3
;(LambdaSimple'(  ( null? , fold-right , cons ) , [(LambdaOpt'(  (  . args ), , [ApplicTP'( Var' ( VarBound ( fold-right , 0 , 0 )) , [(LambdaSimple'(  ( e , a ) , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( a , 1 ))] ) , Var' ( VarParam ( e , 0 )),ApplicTP'( Var' ( VarBound ( fold-right , 1 , 1 )) , [Var' ( VarBound ( cons , 1 , 1 )) , Var' ( VarParam ( a , 1 )) , Var' ( VarParam ( e , 0 ))] ) )] ) , Const' ( Nil) , Var' ( VarParam ( args , 0 ))] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_876
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_877
is_not_empty_876:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_878:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_878
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_880
params_loop_879:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_879
no_more_params_880:
mov qword[rdx], rbx
is_empty_877:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_881)
jmp Lcont_882
Lcode_881:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_883
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_884
is_not_empty_883:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_885:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_885
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_887
params_loop_886:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_886
no_more_params_887:
mov qword[rdx], rbx
is_empty_884:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_888)
jmp Lcont_889
Lcode_888:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 0
jne not_empty_opt_890
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_891
not_empty_opt_890:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 0; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_891
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_892:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 0; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 0;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_892
done_fixing_891:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+4
push rax
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_908
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_909
is_not_empty_908:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_910:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_910
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_912
params_loop_911:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_911
no_more_params_912:
mov qword[rdx], rbx
is_empty_909:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_913)
jmp Lcont_914
Lcode_913:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_965
mov rax, qword [rbp+8*(4+0)]
jmp Lexit_966
Lelse_965:
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]
push rax
push 3
;Var' ( VarBound ( fold-right , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_966:
leave
ret
Lcont_914:
push rax
push 3
;Var' ( VarBound ( fold-right , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_889:
leave
ret
Lcont_882:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+33*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_977
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_978
is_not_empty_977:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_979:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_979
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_981
params_loop_980:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_980
no_more_params_981:
mov qword[rdx], rbx
is_empty_978:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_982)
jmp Lcont_983
Lcode_982:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 0
jne not_empty_opt_984
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_985
not_empty_opt_984:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 0; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_985
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_986:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 0; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 0;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_986
done_fixing_985:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
leave
ret
Lcont_983:
mov qword[fvar_tbl+34*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+25*8]
push rax
mov rax, qword[fvar_tbl+3*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
push 3
;(LambdaSimple'(  ( null? , pair? , cdr ) , [ApplicTP'( (LambdaSimple'(  ( list?-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( list?-loop , 0 )) , (LambdaSimple'(  ( x ) , [(Or'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( pair? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , ApplicTP'( Var' ( VarFree ( list? )) , [Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] )] ),Const' ( false) ) )] ) ) , Var' ( VarParam ( list?-loop , 0 ))] )] ) , [Const' ( Symbol(whatever))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1017
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1018
is_not_empty_1017:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1019:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1019
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1021
params_loop_1020:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1020
no_more_params_1021:
mov qword[rdx], rbx
is_empty_1018:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1022)
jmp Lcont_1023
Lcode_1022:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( list?-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( list?-loop , 0 )) , (LambdaSimple'(  ( x ) , [(Or'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( pair? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , ApplicTP'( Var' ( VarFree ( list? )) , [Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] )] ),Const' ( false) ) )] ) ) , Var' ( VarParam ( list?-loop , 0 ))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1034
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1035
is_not_empty_1034:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1036:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1036
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1038
params_loop_1037:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1037
no_more_params_1038:
mov qword[rdx], rbx
is_empty_1035:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1039)
jmp Lcont_1040
Lcode_1039:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1051
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1052
is_not_empty_1051:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1053:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1053
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1055
params_loop_1054:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1054
no_more_params_1055:
mov qword[rdx], rbx
is_empty_1052:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1056)
jmp Lcont_1057
Lcode_1056:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_1063 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( pair? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_1129
push 496351

push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 1
;Var' ( VarFree ( list? ))
mov rax, qword[fvar_tbl+35*8]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_1130
Lelse_1129:
mov rax, const_tbl+2
Lexit_1130:
Lexit_1063:

leave
ret
Lcont_1057:
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
leave
ret
Lcont_1040:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1023:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+35*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+17*8]
push rax
mov rax, qword[fvar_tbl+30*8]
push rax
push 2
;(LambdaSimple'(  ( fold-left , + ) , [(LambdaSimple'(  ( l ) , [ApplicTP'( Var' ( VarBound ( fold-left , 0 , 0 )) , [(LambdaSimple'(  ( acc , e ) , [ApplicTP'( Var' ( VarBound ( + , 1 , 1 )) , [Var' ( VarParam ( acc , 0 )) , Const' ( 1)] )] ) , Const' ( 0) , Var' ( VarParam ( l , 0 ))] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1156
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1157
is_not_empty_1156:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1158:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1158
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1160
params_loop_1159:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1159
no_more_params_1160:
mov qword[rdx], rbx
is_empty_1157:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1161)
jmp Lcont_1162
Lcode_1161:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1163
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1164
is_not_empty_1163:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1165:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1165
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1167
params_loop_1166:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1166
no_more_params_1167:
mov qword[rdx], rbx
is_empty_1164:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1168)
jmp Lcont_1169
Lcode_1168:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+41
push rax
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1185
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1186
is_not_empty_1185:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1187:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1187
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1189
params_loop_1188:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1188
no_more_params_1189:
mov qword[rdx], rbx
is_empty_1186:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1190)
jmp Lcont_1191
Lcode_1190:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+6
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( + , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1191:
push rax
push 3
;Var' ( VarBound ( fold-left , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1169:
leave
ret
Lcont_1162:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+36*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+12*8]
push rax
mov rax, qword[fvar_tbl+24*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
push 3
;(LambdaSimple'(  ( null? , car , make-string ) , [(LambdaOpt'(  ( x . y ), , [(If'( Applic'( Var' ( VarBound ( null? , 0 , 0 )) , [Var' ( VarParam ( y , 1 ))] ) , ApplicTP'( Var' ( VarBound ( make-string , 0 , 0 )) , [Var' ( VarParam ( x , 0 )) , Const' ( Char( ))] ),ApplicTP'( Var' ( VarBound ( make-string , 0 , 0 )) , [Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( car , 0 , 0 )) , [Var' ( VarParam ( y , 1 ))] )] ) )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1242
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1243
is_not_empty_1242:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1244:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1244
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1246
params_loop_1245:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1245
no_more_params_1246:
mov qword[rdx], rbx
is_empty_1243:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1247)
jmp Lcont_1248
Lcode_1247:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1249
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1250
is_not_empty_1249:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1251:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1251
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1253
params_loop_1252:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1252
no_more_params_1253:
mov qword[rdx], rbx
is_empty_1250:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1254)
jmp Lcont_1255
Lcode_1254:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_1256
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1257
not_empty_opt_1256:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1257
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1258:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 1;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1258
done_fixing_1257:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_1329
push 496351

mov rax, const_tbl+50
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( make-string , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_1330
Lelse_1329:
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( make-string , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_1330:
leave
ret
Lcont_1255:
leave
ret
Lcont_1248:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+12*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1336
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1337
is_not_empty_1336:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1338:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1338
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1340
params_loop_1339:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1339
no_more_params_1340:
mov qword[rdx], rbx
is_empty_1337:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1341)
jmp Lcont_1342
Lcode_1341:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
cmp rax, SOB_FALSE_ADDRESS
je Lelse_1363
mov rax, const_tbl+2
jmp Lexit_1364
Lelse_1363:
mov rax, const_tbl+0
Lexit_1364:
leave
ret
Lcont_1342:
mov qword[fvar_tbl+37*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+2*8]
push rax
mov rax, qword[fvar_tbl+1*8]
push rax
push 2
;(LambdaSimple'(  ( float? , integer? ) , [(LambdaSimple'(  ( x ) , [(Or'( Applic'( Var' ( VarBound ( float? , 0 , 0 )) , [Var' ( VarParam ( x , 0 ))] ) , ApplicTP'( Var' ( VarBound ( integer? , 0 , 0 )) , [Var' ( VarParam ( x , 0 ))] ) )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1385
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1386
is_not_empty_1385:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1387:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1387
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1389
params_loop_1388:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1388
no_more_params_1389:
mov qword[rdx], rbx
is_empty_1386:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1390)
jmp Lcont_1391
Lcode_1390:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1392
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1393
is_not_empty_1392:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1394:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1394
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1396
params_loop_1395:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1395
no_more_params_1396:
mov qword[rdx], rbx
is_empty_1393:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1397)
jmp Lcont_1398
Lcode_1397:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( float? , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_1404 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( integer? , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_1404:

leave
ret
Lcont_1398:
leave
ret
Lcont_1391:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+38*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+17*8]
push rax
mov rax, qword[fvar_tbl+30*8]
push rax
push 2
;(LambdaSimple'(  ( fold-left , + ) , [(LambdaOpt'(  (  . x ), , [ApplicTP'( Var' ( VarBound ( fold-left , 0 , 0 )) , [Var' ( VarBound ( + , 0 , 0 )) , Const' ( 0) , Var' ( VarParam ( x , 0 ))] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1455
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1456
is_not_empty_1455:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1457:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1457
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1459
params_loop_1458:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1458
no_more_params_1459:
mov qword[rdx], rbx
is_empty_1456:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1460)
jmp Lcont_1461
Lcode_1460:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1462
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1463
is_not_empty_1462:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1464:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1464
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1466
params_loop_1465:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1465
no_more_params_1466:
mov qword[rdx], rbx
is_empty_1463:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1467)
jmp Lcont_1468
Lcode_1467:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 0
jne not_empty_opt_1469
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1470
not_empty_opt_1469:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 0; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1470
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1471:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 0; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 0;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1471
done_fixing_1470:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+41
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]
push rax
push 3
;Var' ( VarBound ( fold-left , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1468:
leave
ret
Lcont_1461:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+17*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+18*8]
push rax
mov rax, qword[fvar_tbl+30*8]
push rax
push 2
;(LambdaSimple'(  ( fold-left , * ) , [(LambdaOpt'(  (  . x ), , [ApplicTP'( Var' ( VarBound ( fold-left , 0 , 0 )) , [Var' ( VarBound ( * , 0 , 0 )) , Const' ( 1) , Var' ( VarParam ( x , 0 ))] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1517
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1518
is_not_empty_1517:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1519:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1519
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1521
params_loop_1520:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1520
no_more_params_1521:
mov qword[rdx], rbx
is_empty_1518:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1522)
jmp Lcont_1523
Lcode_1522:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1524
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1525
is_not_empty_1524:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1526:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1526
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1528
params_loop_1527:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1527
no_more_params_1528:
mov qword[rdx], rbx
is_empty_1525:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1529)
jmp Lcont_1530
Lcode_1529:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 0
jne not_empty_opt_1531
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1532
not_empty_opt_1531:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 0; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1532
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1533:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 0; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 0;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1533
done_fixing_1532:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+6
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]
push rax
push 3
;Var' ( VarBound ( fold-left , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1530:
leave
ret
Lcont_1523:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+18*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+4*8]
push rax
mov rax, qword[fvar_tbl+17*8]
push rax
mov rax, qword[fvar_tbl+19*8]
push rax
mov rax, qword[fvar_tbl+28*8]
push rax
push 4
;(LambdaSimple'(  ( apply , - , + , null? ) , [(LambdaOpt'(  ( x . y ), , [(If'( Applic'( Var' ( VarBound ( null? , 0 , 0 )) , [Var' ( VarParam ( y , 1 ))] ) , ApplicTP'( Var' ( VarBound ( - , 0 , 0 )) , [Const' ( 0) , Var' ( VarParam ( x , 0 ))] ),ApplicTP'( Var' ( VarBound ( - , 0 , 0 )) , [Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( apply , 0 , 0 )) , [Var' ( VarBound ( + , 0 , 0 )) , Var' ( VarParam ( y , 1 ))] )] ) )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1589
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1590
is_not_empty_1589:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1591:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1591
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1593
params_loop_1592:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1592
no_more_params_1593:
mov qword[rdx], rbx
is_empty_1590:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1594)
jmp Lcont_1595
Lcode_1594:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1596
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1597
is_not_empty_1596:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1598:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1598
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1600
params_loop_1599:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1599
no_more_params_1600:
mov qword[rdx], rbx
is_empty_1597:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1601)
jmp Lcont_1602
Lcode_1601:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_1603
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1604
not_empty_opt_1603:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1604
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1605:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 1;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1605
done_fixing_1604:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_1681
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+41
push rax
push 2
;Var' ( VarBound ( - , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_1682
Lelse_1681:
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*2]
push rax
push 2
;Var' ( VarBound ( apply , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( - , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_1682:
leave
ret
Lcont_1602:
leave
ret
Lcont_1595:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+19*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+4*8]
push rax
mov rax, qword[fvar_tbl+18*8]
push rax
mov rax, qword[fvar_tbl+20*8]
push rax
mov rax, qword[fvar_tbl+28*8]
push rax
push 4
;(LambdaSimple'(  ( apply , / , * , null? ) , [(LambdaOpt'(  ( x . y ), , [(If'( Applic'( Var' ( VarBound ( null? , 0 , 0 )) , [Var' ( VarParam ( y , 1 ))] ) , ApplicTP'( Var' ( VarBound ( / , 0 , 0 )) , [Const' ( 1) , Var' ( VarParam ( x , 0 ))] ),ApplicTP'( Var' ( VarBound ( / , 0 , 0 )) , [Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( apply , 0 , 0 )) , [Var' ( VarBound ( * , 0 , 0 )) , Var' ( VarParam ( y , 1 ))] )] ) )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1713
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1714
is_not_empty_1713:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1715:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1715
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1717
params_loop_1716:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1716
no_more_params_1717:
mov qword[rdx], rbx
is_empty_1714:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1718)
jmp Lcont_1719
Lcode_1718:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1720
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1721
is_not_empty_1720:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1722:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1722
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1724
params_loop_1723:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1723
no_more_params_1724:
mov qword[rdx], rbx
is_empty_1721:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1725)
jmp Lcont_1726
Lcode_1725:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_1727
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1728
not_empty_opt_1727:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1728
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1729:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 1;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1729
done_fixing_1728:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_1805
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, const_tbl+6
push rax
push 2
;Var' ( VarBound ( / , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_1806
Lelse_1805:
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*2]
push rax
push 2
;Var' ( VarBound ( apply , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( / , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_1806:
leave
ret
Lcont_1726:
leave
ret
Lcont_1719:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+20*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+28*8]
push rax
mov rax, qword[fvar_tbl+25*8]
push rax
mov rax, qword[fvar_tbl+24*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
mov rax, qword[fvar_tbl+22*8]
push rax
push 5
;(LambdaSimple'(  ( = , null? , car , cdr , apply ) , [ApplicTP'( (LambdaSimple'(  ( =-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( =-loop , 0 )) , (Box'( VarParam ( =-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( =-loop , 0 ) , (LambdaOpt'(  ( x . y ), , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Const' ( true),(If'( Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ) , ApplicTP'( Var' ( VarBound ( apply , 1 , 1 )) , [(BoxGet'( VarBound ( =-loop , 0 , 0 ) ) , Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ),Const' ( false) ) )] ) ) , (BoxGet'( VarParam ( =-loop , 0 ) )] )] )] ) , [Const' ( Symbol(whatever))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1842
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1843
is_not_empty_1842:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1844:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1844
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1846
params_loop_1845:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1845
no_more_params_1846:
mov qword[rdx], rbx
is_empty_1843:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1847)
jmp Lcont_1848
Lcode_1847:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( =-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( =-loop , 0 )) , (Box'( VarParam ( =-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( =-loop , 0 ) , (LambdaOpt'(  ( x . y ), , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Const' ( true),(If'( Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ) , ApplicTP'( Var' ( VarBound ( apply , 1 , 1 )) , [(BoxGet'( VarBound ( =-loop , 0 , 0 ) ) , Var' ( VarParam ( x , 0 )) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ),Const' ( false) ) )] ) ) , (BoxGet'( VarParam ( =-loop , 0 ) )] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1859
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1860
is_not_empty_1859:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1861:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1861
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1863
params_loop_1862:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1862
no_more_params_1863:
mov qword[rdx], rbx
is_empty_1860:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1864)
jmp Lcont_1865
Lcode_1864:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_1901
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_1902
is_not_empty_1901:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_1903:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_1903
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_1905
params_loop_1904:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_1904
no_more_params_1905:
mov qword[rdx], rbx
is_empty_1902:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_1906)
jmp Lcont_1907
Lcode_1906:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_1908
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_1909
not_empty_opt_1908:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_1909
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_1910:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 1;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_1910
done_fixing_1909:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_2018
mov rax, const_tbl+0
jmp Lexit_2019
Lelse_2018:
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( = , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_2016
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]
push rax
push 3
;Var' ( VarBound ( apply , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 7
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_2017
Lelse_2016:
mov rax, const_tbl+2
Lexit_2017:
Lexit_2019:
leave
ret
Lcont_1907:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_1865:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_1848:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+22*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+25*8]
push rax
mov rax, qword[fvar_tbl+24*8]
push rax
mov rax, qword[fvar_tbl+21*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
push 4
;(LambdaSimple'(  ( null? , < , car , cdr ) , [ApplicTP'( (LambdaSimple'(  ( <-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( <-loop , 0 )) , (Box'( VarParam ( <-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( <-loop , 0 ) , (LambdaSimple'(  ( element , lst ) , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] ) , Const' ( true),(If'( Applic'( Var' ( VarBound ( < , 1 , 1 )) , [Var' ( VarParam ( element , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ) , ApplicTP'( (BoxGet'( VarBound ( <-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] ) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ),Const' ( false) ) )] ) ) , (LambdaOpt'(  ( x . y ), , [ApplicTP'( (BoxGet'( VarBound ( <-loop , 0 , 0 ) ) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] )] )] )] )] ) , [Const' ( Symbol(whatever))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2060
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2061
is_not_empty_2060:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2062:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2062
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2064
params_loop_2063:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2063
no_more_params_2064:
mov qword[rdx], rbx
is_empty_2061:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2065)
jmp Lcont_2066
Lcode_2065:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( <-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( <-loop , 0 )) , (Box'( VarParam ( <-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( <-loop , 0 ) , (LambdaSimple'(  ( element , lst ) , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] ) , Const' ( true),(If'( Applic'( Var' ( VarBound ( < , 1 , 1 )) , [Var' ( VarParam ( element , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ) , ApplicTP'( (BoxGet'( VarBound ( <-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] ) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ),Const' ( false) ) )] ) ) , (LambdaOpt'(  ( x . y ), , [ApplicTP'( (BoxGet'( VarBound ( <-loop , 0 , 0 ) ) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] )] )] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2077
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2078
is_not_empty_2077:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2079:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2079
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2081
params_loop_2080:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2080
no_more_params_2081:
mov qword[rdx], rbx
is_empty_2078:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2082)
jmp Lcont_2083
Lcode_2082:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2119
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2120
is_not_empty_2119:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2121:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2121
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2123
params_loop_2122:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2122
no_more_params_2123:
mov qword[rdx], rbx
is_empty_2120:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2124)
jmp Lcont_2125
Lcode_2124:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_2238
mov rax, const_tbl+0
jmp Lexit_2239
Lelse_2238:
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( < , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_2236
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;(BoxGet'( VarBound ( <-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_2237
Lelse_2236:
mov rax, const_tbl+2
Lexit_2237:
Lexit_2239:
leave
ret
Lcont_2125:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2240
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2241
is_not_empty_2240:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2242:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2242
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2244
params_loop_2243:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2243
no_more_params_2244:
mov qword[rdx], rbx
is_empty_2241:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2245)
jmp Lcont_2246
Lcode_2245:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_2247
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_2248
not_empty_opt_2247:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_2248
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_2249:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 1;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_2249
done_fixing_2248:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;(BoxGet'( VarBound ( <-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2246:
leave
ret
Lcont_2083:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2066:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+21*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+25*8]
push rax
mov rax, qword[fvar_tbl+24*8]
push rax
mov rax, qword[fvar_tbl+37*8]
push rax
mov rax, qword[fvar_tbl+22*8]
push rax
mov rax, qword[fvar_tbl+21*8]
push rax
mov rax, qword[fvar_tbl+4*8]
push rax
push 6
;(LambdaSimple'(  ( null? , < , = , not , car , cdr ) , [ApplicTP'( (LambdaSimple'(  ( >-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( >-loop , 0 )) , (Box'( VarParam ( >-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( >-loop , 0 ) , (LambdaSimple'(  ( element , lst ) , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] ) , Const' ( true),(If'( Applic'( Var' ( VarBound ( not , 1 , 1 )) , [(Or'( Applic'( Var' ( VarBound ( < , 1 , 1 )) , [Var' ( VarParam ( element , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ) , Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Var' ( VarParam ( element , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ) )] ) , ApplicTP'( (BoxGet'( VarBound ( >-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] ) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ),Const' ( false) ) )] ) ) , (LambdaOpt'(  ( x . y ), , [ApplicTP'( (BoxGet'( VarBound ( >-loop , 0 , 0 ) ) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] )] )] )] )] ) , [Const' ( Symbol(whatever))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2315
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2316
is_not_empty_2315:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2317:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2317
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2319
params_loop_2318:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2318
no_more_params_2319:
mov qword[rdx], rbx
is_empty_2316:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2320)
jmp Lcont_2321
Lcode_2320:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( >-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( >-loop , 0 )) , (Box'( VarParam ( >-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( >-loop , 0 ) , (LambdaSimple'(  ( element , lst ) , [(If'( Applic'( Var' ( VarBound ( null? , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] ) , Const' ( true),(If'( Applic'( Var' ( VarBound ( not , 1 , 1 )) , [(Or'( Applic'( Var' ( VarBound ( < , 1 , 1 )) , [Var' ( VarParam ( element , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ) , Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Var' ( VarParam ( element , 0 )) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ) )] ) , ApplicTP'( (BoxGet'( VarBound ( >-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] ) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( lst , 1 ))] )] ),Const' ( false) ) )] ) ) , (LambdaOpt'(  ( x . y ), , [ApplicTP'( (BoxGet'( VarBound ( >-loop , 0 , 0 ) ) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] )] )] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2332
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2333
is_not_empty_2332:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2334:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2334
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2336
params_loop_2335:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2335
no_more_params_2336:
mov qword[rdx], rbx
is_empty_2333:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2337)
jmp Lcont_2338
Lcode_2337:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2374
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2375
is_not_empty_2374:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2376:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2376
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2378
params_loop_2377:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2377
no_more_params_2378:
mov qword[rdx], rbx
is_empty_2375:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2379)
jmp Lcont_2380
Lcode_2379:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( null? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_2539
mov rax, const_tbl+0
jmp Lexit_2540
Lelse_2539:
push 496351

push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( < , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_2421 
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( = , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_2421:

push rax
push 1
;Var' ( VarBound ( not , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_2537
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*5]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;(BoxGet'( VarBound ( >-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_2538
Lelse_2537:
mov rax, const_tbl+2
Lexit_2538:
Lexit_2540:
leave
ret
Lcont_2380:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2541
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2542
is_not_empty_2541:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2543:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2543
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2545
params_loop_2544:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2544
no_more_params_2545:
mov qword[rdx], rbx
is_empty_2542:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2546)
jmp Lcont_2547
Lcode_2546:
;donte the effective numer of parameters m
;donte the noumber of simple parameters n
mov rcx, qword[rsp+ 8*2]; rcx is m
cmp rcx, 1
jne not_empty_opt_2548
; m = n
add rcx, 3;m+2 - offset of magic
shl rcx, 3
mov qword[rsp+rcx], SOB_NIL_ADDRESS; magic is NIL
jmp done_fixing_2549
not_empty_opt_2548:
add rcx, 2; rcx is m+2 - the offset of the ultimetly last argument
mov rdi, rcx
mov rbx, qword[rsp+8*rdi]
MAKE_PAIR(rdx, rbx, SOB_NIL_ADDRESS)
mov qword[rsp+8*rdi], rdx;Arg_m-1 contains '(Arg_n-1)
sub rcx, 2; rcx is m
sub rcx, 1; rcx is m-n
dec rcx; because we've already handled the top opt param
cmp rcx, 0
je done_fixing_2549
;rcx is the number of optional parameters left (i.e. (m-n)-1)
create_opt_loop_2550:
mov rdx, rcx; rdx is curr_m (i.e: (m-n) - i, i.e the current amount of not consumed optional args left)
dec rdx; rdx is now offset
add rdx, 3; offset of arg_0+(curr_m-1)
add rdx, 1; offset of last optional param not consumed
mov rbx, qword[rsp + 8*rdx]
mov rdi, qword[rsp + 8*(rdx +1)]
MAKE_PAIR(rsi, rbx, rdi)
mov qword[rsp + 8*(rdx +1)], rsi
mov rax, 0
mov rdi, rsp
add rdi, 8; destination
mov rsi, rsp;source
mov rdx, 1;n
add rdx, 3; n+3
add rdx, rcx;n+3+curr_m
dec rdx; because the last opttion param have been consumed
shl rdx, 3
push rcx
call memmove
pop rcx
add rsp, 8
sub qword[rsp +2*8], 1; curr_m = curr_m-1
loop create_opt_loop_2550
done_fixing_2549:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;(BoxGet'( VarBound ( >-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2547:
leave
ret
Lcont_2338:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2321:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+39*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+22*8]
push rax
push 1
;(LambdaSimple'(  ( = ) , [(LambdaSimple'(  ( x ) , [ApplicTP'( Var' ( VarBound ( = , 0 , 0 )) , [Var' ( VarParam ( x , 0 )) , Const' ( 0)] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2591
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2592
is_not_empty_2591:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2593:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2593
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2595
params_loop_2594:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2594
no_more_params_2595:
mov qword[rdx], rbx
is_empty_2592:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2596)
jmp Lcont_2597
Lcode_2596:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2598
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2599
is_not_empty_2598:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2600:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2600
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2602
params_loop_2601:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2601
no_more_params_2602:
mov qword[rdx], rbx
is_empty_2599:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2603)
jmp Lcont_2604
Lcode_2603:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+41
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( = , 0 , 0 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2604:
leave
ret
Lcont_2597:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+40*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+19*8]
push rax
mov rax, qword[fvar_tbl+21*8]
push rax
mov rax, qword[fvar_tbl+9*8]
push rax
mov rax, qword[fvar_tbl+10*8]
push rax
push 4
;(LambdaSimple'(  ( string-ref , string-length , < , - ) , [(LambdaSimple'(  ( s ) , [ApplicTP'( (LambdaSimple'(  ( s->l-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( s->l-loop , 0 )) , (Box'( VarParam ( s->l-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( s->l-loop , 0 ) , (LambdaSimple'(  ( n , a ) , [(If'( Applic'( Var' ( VarBound ( < , 2 , 2 )) , [Var' ( VarParam ( n , 0 )) , Const' ( 0)] ) , Var' ( VarParam ( a , 1 )),ApplicTP'( (BoxGet'( VarBound ( s->l-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( - , 2 , 2 )) , [Var' ( VarParam ( n , 0 )) , Const' ( 1)] ) , Applic'( Var' ( VarFree ( cons )) , [Applic'( Var' ( VarBound ( string-ref , 2 , 2 )) , [Var' ( VarBound ( s , 1 , 1 )) , Var' ( VarParam ( n , 0 ))] ) , Var' ( VarParam ( a , 1 ))] )] ) )] ) ) , ApplicTP'( (BoxGet'( VarParam ( s->l-loop , 0 ) ) , [Applic'( Var' ( VarBound ( - , 1 , 1 )) , [Applic'( Var' ( VarBound ( string-length , 1 , 1 )) , [Var' ( VarBound ( s , 0 , 0 ))] ) , Const' ( 1)] ) , Const' ( Nil)] )] )] )] ) , [Const' ( Symbol(whatever))] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2655
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2656
is_not_empty_2655:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2657:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2657
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2659
params_loop_2658:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2658
no_more_params_2659:
mov qword[rdx], rbx
is_empty_2656:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2660)
jmp Lcont_2661
Lcode_2660:
push rbp
mov rbp, rsp
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2662
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2663
is_not_empty_2662:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2664:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2664
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2666
params_loop_2665:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2665
no_more_params_2666:
mov qword[rdx], rbx
is_empty_2663:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2667)
jmp Lcont_2668
Lcode_2667:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( s->l-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( s->l-loop , 0 )) , (Box'( VarParam ( s->l-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( s->l-loop , 0 ) , (LambdaSimple'(  ( n , a ) , [(If'( Applic'( Var' ( VarBound ( < , 2 , 2 )) , [Var' ( VarParam ( n , 0 )) , Const' ( 0)] ) , Var' ( VarParam ( a , 1 )),ApplicTP'( (BoxGet'( VarBound ( s->l-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( - , 2 , 2 )) , [Var' ( VarParam ( n , 0 )) , Const' ( 1)] ) , Applic'( Var' ( VarFree ( cons )) , [Applic'( Var' ( VarBound ( string-ref , 2 , 2 )) , [Var' ( VarBound ( s , 1 , 1 )) , Var' ( VarParam ( n , 0 ))] ) , Var' ( VarParam ( a , 1 ))] )] ) )] ) ) , ApplicTP'( (BoxGet'( VarParam ( s->l-loop , 0 ) ) , [Applic'( Var' ( VarBound ( - , 1 , 1 )) , [Applic'( Var' ( VarBound ( string-length , 1 , 1 )) , [Var' ( VarBound ( s , 0 , 0 ))] ) , Const' ( 1)] ) , Const' ( Nil)] )] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2679
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2680
is_not_empty_2679:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2681:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2681
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2683
params_loop_2682:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2682
no_more_params_2683:
mov qword[rdx], rbx
is_empty_2680:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2684)
jmp Lcont_2685
Lcode_2684:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2721
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2722
is_not_empty_2721:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2723:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2723
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2725
params_loop_2724:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2724
no_more_params_2725:
mov qword[rdx], rbx
is_empty_2722:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2726)
jmp Lcont_2727
Lcode_2726:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+41
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( < , 2 , 2 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*2]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_2828
mov rax, qword [rbp+8*(4+1)]
jmp Lexit_2829
Lelse_2828:
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]
push rax
push 2
;Var' ( VarBound ( string-ref , 2 , 2 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*2]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;Var' ( VarFree ( cons ))
mov rax, qword[fvar_tbl+23*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, const_tbl+6
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( - , 2 , 2 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*2]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;(BoxGet'( VarBound ( s->l-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_2829:
leave
ret
Lcont_2727:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
push 496351

mov rax, const_tbl+4
push rax
push 496351

mov rax, const_tbl+6
push rax
push 496351

mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
push rax
push 1
;Var' ( VarBound ( string-length , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;Var' ( VarBound ( - , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;(BoxGet'( VarParam ( s->l-loop , 0 ) )
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2685:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2668:
leave
ret
Lcont_2661:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+41*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

push 496351

mov rax, qword[fvar_tbl+14*8]
push rax
mov rax, qword[fvar_tbl+25*8]
push rax
mov rax, qword[fvar_tbl+24*8]
push rax
mov rax, qword[fvar_tbl+16*8]
push rax
mov rax, qword[fvar_tbl+6*8]
push rax
mov rax, qword[fvar_tbl+5*8]
push rax
mov rax, qword[fvar_tbl+3*8]
push rax
mov rax, qword[fvar_tbl+1*8]
push rax
mov rax, qword[fvar_tbl+2*8]
push rax
mov rax, qword[fvar_tbl+41*8]
push rax
mov rax, qword[fvar_tbl+22*8]
push rax
push 11
;(LambdaSimple'(  ( = , string->list , integer? , float? , pair? , char? , string? , eq? , car , cdr , char->integer ) , [ApplicTP'( (LambdaSimple'(  ( equal?-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( equal?-loop , 0 )) , (Box'( VarParam ( equal?-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( equal?-loop , 0 ) , (LambdaSimple'(  ( x , y ) , [(Or'( (If'( Applic'( Var' ( VarBound ( integer? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( integer? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] ),Const' ( false) ),Const' ( false) ) , (If'( Applic'( Var' ( VarBound ( float? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( float? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] ),Const' ( false) ),Const' ( false) ) , (If'( Applic'( Var' ( VarBound ( pair? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( pair? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , (If'( Applic'( (BoxGet'( VarBound ( equal?-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ) , Applic'( (BoxGet'( VarBound ( equal?-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ),Const' ( false) ),Const' ( false) ),Const' ( false) ) , (If'( Applic'( Var' ( VarBound ( char? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( char? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Applic'( Var' ( VarBound ( char->integer , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , Applic'( Var' ( VarBound ( char->integer , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ),Const' ( false) ),Const' ( false) ) , (If'( Applic'( Var' ( VarBound ( string? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( string? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Applic'( (BoxGet'( VarBound ( equal?-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( string->list , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , Applic'( Var' ( VarBound ( string->list , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ),Const' ( false) ),Const' ( false) ) , ApplicTP'( Var' ( VarBound ( eq? , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] ) )] ) ) , (BoxGet'( VarParam ( equal?-loop , 0 ) )] )] )] ) , [Const' ( Symbol(whatever))] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2945
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2946
is_not_empty_2945:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2947:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2947
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2949
params_loop_2948:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2948
no_more_params_2949:
mov qword[rdx], rbx
is_empty_2946:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2950)
jmp Lcont_2951
Lcode_2950:
push rbp
mov rbp, rsp
push 496351

mov rax, const_tbl+32
push rax
push 1
;(LambdaSimple'(  ( equal?-loop ) , [(Seq'( [(Set'( Var' ( VarParam ( equal?-loop , 0 )) , (Box'( VarParam ( equal?-loop , 0 ) ) ) , (Seq'( [(BoxSet'( VarParam ( equal?-loop , 0 ) , (LambdaSimple'(  ( x , y ) , [(Or'( (If'( Applic'( Var' ( VarBound ( integer? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( integer? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] ),Const' ( false) ),Const' ( false) ) , (If'( Applic'( Var' ( VarBound ( float? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( float? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] ),Const' ( false) ),Const' ( false) ) , (If'( Applic'( Var' ( VarBound ( pair? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( pair? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , (If'( Applic'( (BoxGet'( VarBound ( equal?-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , Applic'( Var' ( VarBound ( car , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ) , Applic'( (BoxGet'( VarBound ( equal?-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , Applic'( Var' ( VarBound ( cdr , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ),Const' ( false) ),Const' ( false) ),Const' ( false) ) , (If'( Applic'( Var' ( VarBound ( char? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( char? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Applic'( Var' ( VarBound ( = , 1 , 1 )) , [Applic'( Var' ( VarBound ( char->integer , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , Applic'( Var' ( VarBound ( char->integer , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ),Const' ( false) ),Const' ( false) ) , (If'( Applic'( Var' ( VarBound ( string? , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , (If'( Applic'( Var' ( VarBound ( string? , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] ) , Applic'( (BoxGet'( VarBound ( equal?-loop , 0 , 0 ) ) , [Applic'( Var' ( VarBound ( string->list , 1 , 1 )) , [Var' ( VarParam ( x , 0 ))] ) , Applic'( Var' ( VarBound ( string->list , 1 , 1 )) , [Var' ( VarParam ( y , 1 ))] )] ),Const' ( false) ),Const' ( false) ) , ApplicTP'( Var' ( VarBound ( eq? , 1 , 1 )) , [Var' ( VarParam ( x , 0 )) , Var' ( VarParam ( y , 1 ))] ) )] ) ) , (BoxGet'( VarParam ( equal?-loop , 0 ) )] )] )] )
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_2962
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_2963
is_not_empty_2962:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_2964:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_2964
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_2966
params_loop_2965:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_2965
no_more_params_2966:
mov qword[rdx], rbx
is_empty_2963:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_2967)
jmp Lcont_2968
Lcode_2967:
push rbp
mov rbp, rsp
mov rax, qword [rbp+8*(4+0)]
MALLOC rbx, 8
mov qword[rbx], rax
mov rax, rbx
mov qword [rbp+8*(4+0)], rax
mov rax, SOB_VOID_ADDRESS
GET_ENV rbx
mov rcx, 0
cmp rbx, SOB_NIL_ADDRESS
jne is_not_empty_3004
MALLOC rdx, 8
mov qword[rdx], SOB_NIL_ADDRESS
jmp is_empty_3005
is_not_empty_3004:
ENV_LENGTH rbx
mov rdi, rcx
inc rdi
shl rdi, 3
MALLOC rdx, rdi
env_loop_3006:
shl rcx, 3
mov rsi, rbx;Env
add rsi, rcx;Env[i]
sub rsi, 8;Env[i-1]
mov r8, rdx;ExtEnv
add r8, rcx;ExtEnv[i]
mov r9, qword[rsi];r9 is the i'th rib
mov qword[r8], r9; ExtEnv[i] = Env[i-1]
shr rcx, 3
loop env_loop_3006
mov rcx, qword[rbp +8*3]
shl rcx, 3
MALLOC rbx, rcx;rbx is the new rib
shr rcx, 3
cmp rcx, 0
je no_more_params_3008
params_loop_3007:
mov rdi, rcx
dec rdi;rdi is the 0 based index of the current arg
GET_ARG rsi, rdi
mov qword[rbx + rdi*8], rsi
loop params_loop_3007
no_more_params_3008:
mov qword[rdx], rbx
is_empty_3005:
;;RDX IS THE EXTENV!!!
MAKE_CLOSURE(rax, rdx, Lcode_3009)
jmp Lcont_3010
Lcode_3009:
push rbp
mov rbp, rsp
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( integer? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3089
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( integer? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*2]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3082
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( = , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_3083
Lelse_3082:
mov rax, const_tbl+2
Lexit_3083:
jmp Lexit_3090
Lelse_3089:
mov rax, const_tbl+2
Lexit_3090:
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_3016 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( float? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3163
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( float? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*3]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3156
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( = , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_3157
Lelse_3156:
mov rax, const_tbl+2
Lexit_3157:
jmp Lexit_3164
Lelse_3163:
mov rax, const_tbl+2
Lexit_3164:
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_3016 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( pair? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3319
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( pair? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*4]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3312
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( car , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*8]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;(BoxGet'( VarBound ( equal?-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3305
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*9]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( cdr , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*9]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;(BoxGet'( VarBound ( equal?-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_3306
Lelse_3305:
mov rax, const_tbl+2
Lexit_3306:
jmp Lexit_3313
Lelse_3312:
mov rax, const_tbl+2
Lexit_3313:
jmp Lexit_3320
Lelse_3319:
mov rax, const_tbl+2
Lexit_3320:
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_3016 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( char? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*5]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3413
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( char? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*5]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3406
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( char->integer , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*10]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( char->integer , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*10]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;Var' ( VarBound ( = , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*0]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_3407
Lelse_3406:
mov rax, const_tbl+2
Lexit_3407:
jmp Lexit_3414
Lelse_3413:
mov rax, const_tbl+2
Lexit_3414:
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_3016 
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( string? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*6]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3512
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( string? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*6]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3505
push 496351

push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
push 1
;Var' ( VarBound ( string->list , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 496351

mov rax, qword [rbp+8*(4+0)]
push rax
push 1
;Var' ( VarBound ( string->list , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*1]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax
push 2
;(BoxGet'( VarBound ( equal?-loop , 0 , 0 ) )
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*0]
mov rax, qword[rax+8*0]
mov rax, qword[rax]

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit_3506
Lelse_3505:
mov rax, const_tbl+2
Lexit_3506:
jmp Lexit_3513
Lelse_3512:
mov rax, const_tbl+2
Lexit_3513:
cmp rax, SOB_FALSE_ADDRESS 
 jne Lexit_3016 
push 496351

mov rax, qword [rbp+8*(4+1)]
push rax
mov rax, qword [rbp+8*(4+0)]
push rax
push 2
;Var' ( VarBound ( eq? , 1 , 1 ))
mov rax, qword[rbp+8*2]
mov rax, qword[rax+8*1]
mov rax, qword[rax+8*7]

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 6
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
Lexit_3016:

leave
ret
Lcont_3010:
push rax
mov rax, qword [rbp+8*(4+0)]
pop qword[rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp+8*(4+0)]
mov rax, qword[rax]
leave
ret
Lcont_2968:

CLOSURE_ENV rbx, rax
push rbx
push qword[rbp +8*1]
SHIFT_FRAME 5
CLOSURE_CODE rbx, rax
jmp rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
leave
ret
Lcont_2951:

CLOSURE_ENV rbx, rax
push rbx
CLOSURE_CODE rbx, rax
call rbx
add rsp, 8*1
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword[fvar_tbl+42*8], rax 
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

mov rax, const_tbl+6
	call write_sob_if_not_void

	mov rax, 0
	add rsp, 4*8
	pop rbp
	ret

apply:
;;; (apply proc x0 ... xn-1 s)
;;; s id s_0 .. s_m-1

;;; TODO: add closure verification
	push rbp
	mov rbp, rsp
	push 496351
	mov rbx, qword[rbp+8*3]
	add rbx, 3
	mov rsi, qword[rbp + 8*rbx]	; rsi is s
	mov rdi, 0		;the length of s
push_s_loop:
	cmp rsi, SOB_NIL_ADDRESS
	je end_push_s
	inc rdi
	CAR rbx, rsi
	push rbx
	CDR rsi, rsi
	jmp push_s_loop
end_push_s:
;;; magic s0 ... sm-1 on the stack
	cmp rdi, 0
	je reverse_s_end
	mov rcx, rdi
	cmp rcx ,1
	jbe reverse_s_end
	shr rcx,1 		;rcx is m/2
reverse_s_loop:
	mov rdx, rcx
	dec rdx			    ;rdx is the index (e.g 0 based)
	mov rbx, qword[rsp + rdx*8] ;rbx is s_i
	mov r8, rdi
	dec r8			  ;r8 is the index of le last elemnt
	sub r8, rdx		;m-i
	mov r9, qword[rsp + r8*8] ; r9 is s_m-i
	mov qword[rsp + rdx*8], r9 
	mov qword[rsp + r8*8], rbx
	loop reverse_s_loop
reverse_s_end:
	mov rcx, qword[rbp+8*3]
	sub rcx, 2		;rdx is n
	mov rsi, rcx		;save it for later
	cmp rsi, 0
	je no_params
push_xs_loop:
	mov rdx, rcx
	dec rdx			;rdx is index
	add rdx, 5		;5  and not 4 because the first parameter is proc
	push qword[rbp +8*rdx]
	loop push_xs_loop
no_params:	
;;; magic s_m-1,..,s_0, x_n-1,..x_0 on the stack
	add rdi, rsi		  ;m+n
	push rdi
	mov rbx, qword[rbp + 8*4] ; rbx is proc
;;; verify that proc is (i.e rbx) a closue
	CLOSURE_ENV rdx, rbx
	push rdx
	mov r8, rbx		;save the closure
	push qword[rbp+8]	;ret address
	mov rdx, rsp 		;this is the source of the memmory move
	push r8
	mov rbx, GET_PARAM_COUNT		;calc memmory length
	add rbx, ELEMENTS_ON_STACK ;;cacl memmory length
	shl rbx, 3			  ;rbx is the number of bytes need to be moved
	mov rbp, qword[rbp]	;current rbp is no longer needed and old rbp need to be accesibl
	mov rsi, rdx
	add rsi, rbx		;src is dest + param_c +elements_on_stack
	mov rax, 0
	mov rdi, rsi		;dest
	mov rsi, rdx		;src
	mov rdx, rbx		;len
	call memmove
	pop rbx			;proc
	mov rsp, rax
	CLOSURE_CODE rdx, rbx
	jmp rdx
	

	
	
	
	
	
	
	
cons:
	push rbp
	mov rbp, rsp
	GET_ARG rsi, 0
	GET_ARG rdx, 1
	MAKE_PAIR(rax, rsi, rdx)
	leave
	ret
car:
	push rbp
	mov rbp, rsp
	GET_ARG rsi, 0
	CAR rax, rsi
	leave
	ret

set_car:
	push rbp
	mov rbp, rsp
	GET_ARG rsi, 0
	GET_ARG rdi, 1
	mov qword[rsi+TYPE_SIZE], rdi
	mov rax, SOB_VOID_ADDRESS
	leave
	ret

set_cdr:
	push rbp
	mov rbp, rsp
	GET_ARG rsi, 0
	GET_ARG rdi, 1
	mov qword[rsi+TYPE_SIZE+WORD_SIZE], rdi
	mov rax, SOB_VOID_ADDRESS
	leave
	ret

cdr:
	push rbp
	mov rbp, rsp
	GET_ARG rsi, 0
	CDR rax, rsi
	leave
	ret
is_boolean:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_BOOL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_float:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_FLOAT
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_integer:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_INTEGER
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_pair:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_PAIR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_null:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_NIL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_char:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CHAR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_string:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_STRING
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_procedure:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CLOSURE
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_symbol:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_SYMBOL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

string_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    STRING_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

string_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov sil, byte [rsi]
    MAKE_CHAR(rax, sil)

    leave
    ret

string_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov rax, PVAR(2)
    CHAR_VAL rax, rax
    mov byte [rsi], al
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    CHAR_VAL rdi, rdi
    and rdi, 255

    MAKE_STRING rax, rsi, dil

    leave
    ret

symbol_to_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    SYMBOL_VAL rsi, rsi
    
    STRING_LENGTH rcx, rsi
    STRING_ELEMENTS rdi, rsi

    push rcx
    push rdi

    mov dil, byte [rdi]
    MAKE_CHAR(rax, dil)
    push rax
    MAKE_INT(rax, rcx)
    push rax
    push 2
    push SOB_NIL_ADDRESS
    call make_string
    add rsp, 4*8

    STRING_ELEMENTS rsi, rax

    pop rdi
    pop rcx

    cmp rcx, 0
    je .end
	
.loop:
    lea r8, [rdi+rcx]
    lea r9, [rsi+rcx]

    mov bl, byte [r8]
    mov byte [r9], bl
    
    loop .loop
.end:

    leave
    ret

char_to_integer:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    CHAR_VAL rsi, rsi
    and rsi, 255
    MAKE_INT(rax, rsi)

    leave
    ret

integer_to_char:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    and rsi, 255
    MAKE_CHAR(rax, sil)

    leave
    ret

is_eq:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    cmp rsi, rdi
    je .true
    mov rax, SOB_FALSE_ADDRESS
    jmp .return

.true:
    mov rax, SOB_TRUE_ADDRESS

.return:
    leave
    ret

bin_add:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    addsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_mul:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    mulsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_sub:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    subsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_div:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    divsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_lt:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpltsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

bin_equ:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpeqsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret


