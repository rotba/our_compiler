     1                                  
     2                                  ;;; All the macros and the scheme-object printing procedure
     3                                  ;;; are defined in compiler.s
     4                                  %include "compiler.s"
     1                              <1> %define T_UNDEFINED 0
     2                              <1> %define T_VOID 1
     3                              <1> %define T_NIL 2
     4                              <1> %define T_INTEGER 3
     5                              <1> %define T_FLOAT 4
     6                              <1> %define T_BOOL 5
     7                              <1> %define T_CHAR 6
     8                              <1> %define T_STRING 7
     9                              <1> %define T_SYMBOL 8
    10                              <1> %define T_CLOSURE 9
    11                              <1> %define T_PAIR 10
    12                              <1> 
    13                              <1> 
    14                              <1> 
    15                              <1> ;; %macro MAKE_LITERAL 2
    16                              <1> ;; 	db %1
    17                              <1> ;; 	%2
    18                              <1> ;; %endmacro
    19                              <1> ;; MAKE_LITERAL T_BOOL, db 0
    20                              <1> 	
    21                              <1> ;; %define MAKE_LITERAL_INT(val) MAKE_LITERAL T_INTEGER, dq val
    22                              <1> ;; %define MAKE_LITERAL_CHAR(val) MAKE_LITERAL T_CHAR, db val
    23                              <1> %define MAKE_NIL db T_NIL
    24                              <1> %define MAKE_VOID db T_VOID
    25                              <1> ;; %define MAKE_BOOL(val) MAKE_LITERAL T_BOOL, db val 
    26                              <1> 
    27                              <1> 	
    28                              <1> %define CHAR_NUL 0
    29                              <1> %define CHAR_TAB 9
    30                              <1> %define CHAR_NEWLINE 10
    31                              <1> %define CHAR_PAGE 12
    32                              <1> %define CHAR_RETURN 13
    33                              <1> %define CHAR_SPACE 32
    34                              <1> %define CHAR_DOUBLEQUOTE 34
    35                              <1> %define CHAR_BACKSLASH 92
    36                              <1> 	
    37                              <1> %define TYPE_SIZE 1
    38                              <1> %define WORD_SIZE 8
    39                              <1> 	
    40                              <1> %define KB(n) n*1024
    41                              <1> %define MB(n) 1024*KB(n)
    42                              <1> %define GB(n) 1024*MB(n)
    43                              <1> 
    44                              <1> 
    45                              <1> %macro SKIP_TYPE_TAG 2
    46                              <1> 	mov %1, qword [%2+TYPE_SIZE]	
    47                              <1> %endmacro	
    48                              <1> 
    49                              <1> %define INT_VAL SKIP_TYPE_TAG
    50                              <1> 
    51                              <1> %macro CHAR_VAL 2
    52                              <1> 	movzx %1, byte [%2+TYPE_SIZE]
    53                              <1> %endmacro
    54                              <1> 
    55                              <1> %define FLOAT_VAL SKIP_TYPE_TAG
    56                              <1> 
    57                              <1> %define STRING_LENGTH SKIP_TYPE_TAG
    58                              <1> 
    59                              <1> %define SYMBOL_VAL SKIP_TYPE_TAG
    60                              <1> 
    61                              <1> %macro STRING_ELEMENTS 2
    62                              <1> 	lea %1, [%2+TYPE_SIZE+WORD_SIZE]
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %define CAR SKIP_TYPE_TAG
    66                              <1> 
    67                              <1> %macro CDR 2
    68                              <1> 	mov %1, qword [%2+TYPE_SIZE+WORD_SIZE]
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> %define CLOSURE_ENV CAR
    72                              <1> 
    73                              <1> %define CLOSURE_CODE CDR
    74                              <1> 
    75                              <1> %define PVAR(n) qword [rbp+(4+n)*WORD_SIZE]
    76                              <1> 	
    77                              <1> %define SOB_UNDEFINED T_UNDEFINED
    78                              <1> %define SOB_NIL T_NIL
    79                              <1> %define SOB_VOID T_VOID
    80                              <1> %define SOB_FALSE word T_BOOL
    81                              <1> %define SOB_TRUE word (1 << TYPE_SIZE | T_BOOL)
    82                              <1> 	
    83                              <1> %define MAKE_LITERAL
    84                              <1> 	
    85                              <1> ; returns %2 allocated bytes in register %1
    86                              <1> ; Supports using with %1 = %2
    87                              <1> %macro MALLOC 2
    88                              <1> 	add qword [malloc_pointer], %2
    89                              <1> 	push %2
    90                              <1> 	mov %1, qword [malloc_pointer]
    91                              <1> 	sub %1, [rsp]
    92                              <1> 	add rsp, 8
    93                              <1> %endmacro
    94                              <1> 	
    95                              <1> ; Creates a short SOB with the
    96                              <1> ; value %2
    97                              <1> ; Returns the result in register %1
    98                              <1> %macro MAKE_CHAR_VALUE 2
    99                              <1> 	MALLOC %1, 1+TYPE_SIZE
   100                              <1> 	mov byte [%1], T_CHAR
   101                              <1> 	mov byte [%1+TYPE_SIZE], %2
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> ; Creates a long SOB with the
   105                              <1> ; value %2 and type %3.
   106                              <1> ; Returns the result in register %1
   107                              <1> %macro MAKE_LONG_VALUE 3
   108                              <1> 	MALLOC %1, TYPE_SIZE+WORD_SIZE
   109                              <1> 	mov byte [%1], %3
   110                              <1> 	mov qword [%1+TYPE_SIZE], %2
   111                              <1> %endmacro
   112                              <1> 	
   113                              <1> %define MAKE_INT(r,val) MAKE_LONG_VALUE r, val, T_INTEGER
   114                              <1> %define MAKE_FLOAT(r,val) MAKE_LONG_VALUE r, val, T_FLOAT
   115                              <1> %define MAKE_CHAR(r,val) MAKE_CHAR_VALUE r, val
   116                              <1> 
   117                              <1> ; Create a string of length %2
   118                              <1> ; from char %3.
   119                              <1> ; Stores result in register %1
   120                              <1> %macro MAKE_STRING 3
   121                              <1> 	lea %1, [%2+WORD_SIZE+TYPE_SIZE]
   122                              <1> 	MALLOC %1, %1
   123                              <1> 	mov byte [%1], T_STRING
   124                              <1> 	mov qword [%1+TYPE_SIZE], %2
   125                              <1> 	push rcx
   126                              <1> 	add %1,WORD_SIZE+TYPE_SIZE
   127                              <1> 	mov rcx, %2
   128                              <1> 	cmp rcx, 0
   129                              <1> %%str_loop:
   130                              <1> 	jz %%str_loop_end
   131                              <1> 	dec rcx
   132                              <1> 	mov byte [%1+rcx], %3
   133                              <1> 	jmp %%str_loop
   134                              <1> %%str_loop_end:
   135                              <1> 	pop rcx
   136                              <1> 	sub %1, WORD_SIZE+TYPE_SIZE
   137                              <1> %endmacro
   138                              <1> 
   139                              <1> ;;; Creates a SOB with tag %2 
   140                              <1> ;;; from two pointers %3 and %4
   141                              <1> ;;; Stores result in register %1
   142                              <1> %macro MAKE_TWO_WORDS 4 
   143                              <1>         MALLOC %1, TYPE_SIZE+WORD_SIZE*2
   144                              <1>         mov byte [%1], %2
   145                              <1>         mov qword [%1+TYPE_SIZE], %3
   146                              <1>         mov qword [%1+TYPE_SIZE+WORD_SIZE], %4
   147                              <1> %endmacro
   148                              <1> 
   149                              <1> %macro MAKE_WORDS_LIT 3
   150                              <1> 	db %1
   151                              <1>         dq %2
   152                              <1>         dq %3
   153                              <1> %endmacro
   154                              <1> 
   156                              <1> %define MAKE_PAIR(r, car, cdr)         MAKE_TWO_WORDS r, T_PAIR, car, cdr
   157                              <1> 
   159                              <1> %define MAKE_LITERAL_PAIR(car, cdr)         MAKE_WORDS_LIT T_PAIR, car, cdr
   160                              <1> 
   162                              <1> %define MAKE_CLOSURE(r, env, body)         MAKE_TWO_WORDS r, T_CLOSURE, env, body
   163                              <1> 
   164                              <1> 	
   165                              <1> extern printf, malloc
   166                              <1> global write_sob, write_sob_if_not_void
   167                              <1> 
   168                              <1> 	
   169                              <1> write_sob_undefined:
   170 00000000 55                  <1> 	push rbp
   171 00000001 4889E5              <1> 	mov rbp, rsp
   172                              <1> 
   173 00000004 B800000000          <1> 	mov rax, 0
   174 00000009 48BF-               <1> 	mov rdi, .undefined
   174 0000000B [0000000000000000]  <1>
   175 00000013 E8(00000000)        <1> 	call printf
   176                              <1> 
   177 00000018 C9                  <1> 	leave
   178 00000019 C3                  <1> 	ret
   179                              <1> 
   180                              <1> section .data
   181                              <1> .undefined:
   182 00000000 233C756E646566696E- <1> 	db "#<undefined>", 0
   182 00000009 65643E00            <1>
   183                              <1> 
   184                              <1> write_sob_integer:
   185 0000000D 55                  <1> 	push rbp
   186 0000000E 4889E5              <1> 	mov rbp, rsp
   187                              <1> 
   188                              <1> 	INT_VAL rsi, rsi
   188 00000011 488B7601            <2>  mov %1, qword [%2+TYPE_SIZE]
   189 00000015 48BF-               <1> 	mov rdi, .int_format_string
   189 00000017 [2B00000000000000]  <1>
   190 0000001F B800000000          <1> 	mov rax, 0
   191 00000024 E8(00000000)        <1> 	call printf
   192                              <1> 
   193 00000029 C9                  <1> 	leave
   194 0000002A C3                  <1> 	ret
   195                              <1> 
   196                              <1> section .data
   197                              <1> .int_format_string:
   198 0000002B 256C6400            <1> 	db "%ld", 0
   199                              <1> 
   200                              <1> write_sob_float:
   201 0000002F 55                  <1> 	push rbp
   202 00000030 4889E5              <1> 	mov rbp, rsp
   203                              <1> 
   204                              <1> 	FLOAT_VAL rsi, rsi
   204 00000033 488B7601            <2>  mov %1, qword [%2+TYPE_SIZE]
   205 00000037 66480F6EC6          <1> 	movq xmm0, rsi
   206 0000003C 48BF-               <1> 	mov rdi, .float_format_string
   206 0000003E [5C00000000000000]  <1>
   207 00000046 B801000000          <1> 	mov rax, 1
   208                              <1> 
   209 0000004B 4889E6              <1> 	mov rsi, rsp
   210 0000004E 4883E4F0            <1> 	and rsp, -16
   211 00000052 E8(00000000)        <1> 	call printf
   212 00000057 4889F4              <1> 	mov rsp, rsi
   213                              <1> 
   214 0000005A C9                  <1> 	leave
   215 0000005B C3                  <1> 	ret
   216                              <1> 	
   217                              <1> section .data
   218                              <1> .float_format_string:
   219 0000005C 256600              <1> 	db "%f", 0		
   220                              <1> 
   221                              <1> write_sob_char:
   222 0000005F 55                  <1> 	push rbp
   223 00000060 4889E5              <1> 	mov rbp, rsp
   224                              <1> 
   225                              <1> 	CHAR_VAL rsi, rsi
   225 00000063 480FB67601          <2>  movzx %1, byte [%2+TYPE_SIZE]
   226                              <1> 
   227 00000068 4883FE00            <1> 	cmp rsi, CHAR_NUL
   228 0000006C 742C                <1> 	je .Lnul
   229                              <1> 
   230 0000006E 4883FE09            <1> 	cmp rsi, CHAR_TAB
   231 00000072 7432                <1> 	je .Ltab
   232                              <1> 
   233 00000074 4883FE0A            <1> 	cmp rsi, CHAR_NEWLINE
   234 00000078 7438                <1> 	je .Lnewline
   235                              <1> 
   236 0000007A 4883FE0C            <1> 	cmp rsi, CHAR_PAGE
   237 0000007E 743E                <1> 	je .Lpage
   238                              <1> 
   239 00000080 4883FE0D            <1> 	cmp rsi, CHAR_RETURN
   240 00000084 7444                <1> 	je .Lreturn
   241                              <1> 
   242 00000086 4883FE20            <1> 	cmp rsi, CHAR_SPACE
   243 0000008A 744A                <1> 	je .Lspace
   244 0000008C 7F54                <1> 	jg .Lregular
   245                              <1> 
   246 0000008E 48BF-               <1> 	mov rdi, .special
   246 00000090 [2801000000000000]  <1>
   247 00000098 EB54                <1> 	jmp .done	
   248                              <1> 
   249                              <1> .Lnul:
   250 0000009A 48BF-               <1> 	mov rdi, .nul
   250 0000009C [2201000000000000]  <1>
   251 000000A4 EB48                <1> 	jmp .done
   252                              <1> 
   253                              <1> .Ltab:
   254 000000A6 48BF-               <1> 	mov rdi, .tab
   254 000000A8 [1501000000000000]  <1>
   255 000000B0 EB3C                <1> 	jmp .done
   256                              <1> 
   257                              <1> .Lnewline:
   258 000000B2 48BF-               <1> 	mov rdi, .newline
   258 000000B4 [0201000000000000]  <1>
   259 000000BC EB30                <1> 	jmp .done
   260                              <1> 
   261                              <1> .Lpage:
   262 000000BE 48BF-               <1> 	mov rdi, .page
   262 000000C0 [1B01000000000000]  <1>
   263 000000C8 EB24                <1> 	jmp .done
   264                              <1> 
   265                              <1> .Lreturn:
   266 000000CA 48BF-               <1> 	mov rdi, .return
   266 000000CC [0C01000000000000]  <1>
   267 000000D4 EB18                <1> 	jmp .done
   268                              <1> 
   269                              <1> .Lspace:
   270 000000D6 48BF-               <1> 	mov rdi, .space
   270 000000D8 [FA00000000000000]  <1>
   271 000000E0 EB0C                <1> 	jmp .done
   272                              <1> 
   273                              <1> .Lregular:
   274 000000E2 48BF-               <1> 	mov rdi, .regular
   274 000000E4 [3001000000000000]  <1>
   275 000000EC EB00                <1> 	jmp .done
   276                              <1> 
   277                              <1> .done:
   278 000000EE B800000000          <1> 	mov rax, 0
   279 000000F3 E8(00000000)        <1> 	call printf
   280                              <1> 
   281 000000F8 C9                  <1> 	leave
   282 000000F9 C3                  <1> 	ret
   283                              <1> 
   284                              <1> section .data
   285                              <1> .space:
   286 000000FA 235C737061636500    <1> 	db "#\space", 0
   287                              <1> .newline:
   288 00000102 235C6E65776C696E65- <1> 	db "#\newline", 0
   288 0000010B 00                  <1>
   289                              <1> .return:
   290 0000010C 235C72657475726E00  <1> 	db "#\return", 0
   291                              <1> .tab:
   292 00000115 235C74616200        <1> 	db "#\tab", 0
   293                              <1> .page:
   294 0000011B 235C7061676500      <1> 	db "#\page", 0
   295                              <1> .nul:
   296 00000122 235C6E756C00        <1> 	db "#\nul", 0
   297                              <1> .special:
   298 00000128 235C782530327800    <1> 	db "#\x%02x", 0
   299                              <1> .regular:
   300 00000130 235C256300          <1> 	db "#\%c", 0
   301                              <1> 
   302                              <1> write_sob_void:
   303 00000135 55                  <1> 	push rbp
   304 00000136 4889E5              <1> 	mov rbp, rsp
   305                              <1> 
   306 00000139 B800000000          <1> 	mov rax, 0
   307 0000013E 48BF-               <1> 	mov rdi, .void
   307 00000140 [4F01000000000000]  <1>
   308 00000148 E8(00000000)        <1> 	call printf
   309                              <1> 
   310 0000014D C9                  <1> 	leave
   311 0000014E C3                  <1> 	ret
   312                              <1> 
   313                              <1> section .data
   314                              <1> .void:
   315 0000014F 233C766F69643E00    <1> 	db "#<void>", 0
   316                              <1> 	
   317                              <1> write_sob_bool:
   318 00000157 55                  <1> 	push rbp
   319 00000158 4889E5              <1> 	mov rbp, rsp
   320                              <1> 
   321 0000015B 66833E05            <1> 	cmp word [rsi], SOB_FALSE
   322 0000015F 740C                <1> 	je .sobFalse
   323                              <1> 	
   324 00000161 48BF-               <1> 	mov rdi, .true
   324 00000163 [8601000000000000]  <1>
   325 0000016B EB0A                <1> 	jmp .continue
   326                              <1> 
   327                              <1> .sobFalse:
   328 0000016D 48BF-               <1> 	mov rdi, .false
   328 0000016F [8301000000000000]  <1>
   329                              <1> 
   330                              <1> .continue:
   331 00000177 B800000000          <1> 	mov rax, 0
   332 0000017C E8(00000000)        <1> 	call printf	
   333                              <1> 
   334 00000181 C9                  <1> 	leave
   335 00000182 C3                  <1> 	ret
   336                              <1> 
   337                              <1> section .data			
   338                              <1> .false:
   339 00000183 236600              <1> 	db "#f", 0
   340                              <1> .true:
   341 00000186 237400              <1> 	db "#t", 0
   342                              <1> 
   343                              <1> write_sob_nil:
   344 00000189 55                  <1> 	push rbp
   345 0000018A 4889E5              <1> 	mov rbp, rsp
   346                              <1> 
   347 0000018D B800000000          <1> 	mov rax, 0
   348 00000192 48BF-               <1> 	mov rdi, .nil
   348 00000194 [A301000000000000]  <1>
   349 0000019C E8(00000000)        <1> 	call printf
   350                              <1> 
   351 000001A1 C9                  <1> 	leave
   352 000001A2 C3                  <1> 	ret
   353                              <1> 
   354                              <1> section .data
   355                              <1> .nil:
   356 000001A3 282900              <1> 	db "()", 0
   357                              <1> 
   358                              <1> write_sob_string:
   359 000001A6 55                  <1> 	push rbp
   360 000001A7 4889E5              <1> 	mov rbp, rsp
   361                              <1> 
   362 000001AA 56                  <1> 	push rsi
   363                              <1> 
   364 000001AB B800000000          <1> 	mov rax, 0
   365 000001B0 48BF-               <1> 	mov rdi, .double_quote
   365 000001B2 [AA02000000000000]  <1>
   366 000001BA E8(00000000)        <1> 	call printf
   367                              <1> 	
   368 000001BF 5E                  <1> 	pop rsi
   369                              <1> 
   370                              <1> 	STRING_LENGTH rcx, rsi
   370 000001C0 488B4E01            <2>  mov %1, qword [%2+TYPE_SIZE]
   371                              <1> 	STRING_ELEMENTS rax, rsi
   371 000001C4 488D4609            <2>  lea %1, [%2+TYPE_SIZE+WORD_SIZE]
   372                              <1> 
   373                              <1> .loop:
   374 000001C8 4883F900            <1> 	cmp rcx, 0
   375 000001CC 0F84C2000000        <1> 	je .done
   376 000001D2 8A18                <1> 	mov bl, byte [rax]
   377 000001D4 4881E3FF000000      <1> 	and rbx, 0xff
   378                              <1> 
   379 000001DB 4883FB09            <1> 	cmp rbx, CHAR_TAB
   380 000001DF 7442                <1> 	je .ch_tab
   381 000001E1 4883FB0A            <1> 	cmp rbx, CHAR_NEWLINE
   382 000001E5 7469                <1> 	je .ch_newline
   383 000001E7 4883FB0C            <1> 	cmp rbx, CHAR_PAGE
   384 000001EB 7445                <1> 	je .ch_page
   385 000001ED 4883FB0D            <1> 	cmp rbx, CHAR_RETURN
   386 000001F1 744E                <1> 	je .ch_return
   387 000001F3 4883FB22            <1> 	cmp rbx, CHAR_DOUBLEQUOTE
   388 000001F7 7466                <1> 	je .ch_doublequote
   389 000001F9 4883FB5C            <1> 	cmp rbx, CHAR_BACKSLASH
   390 000001FD 746F                <1> 	je .ch_backslash
   391 000001FF 4883FB20            <1> 	cmp rbx, CHAR_SPACE
   392 00000203 7C0F                <1> 	jl .ch_hex
   393                              <1> 	
   394 00000205 48BF-               <1> 	mov rdi, .fs_simple_char
   394 00000207 [AC02000000000000]  <1>
   395 0000020F 4889DE              <1> 	mov rsi, rbx
   396 00000212 EB67                <1> 	jmp .printf
   397                              <1> 	
   398                              <1> .ch_hex:
   399 00000214 48BF-               <1> 	mov rdi, .fs_hex_char
   399 00000216 [AF02000000000000]  <1>
   400 0000021E 4889DE              <1> 	mov rsi, rbx
   401 00000221 EB58                <1> 	jmp .printf
   402                              <1> 	
   403                              <1> .ch_tab:
   404 00000223 48BF-               <1> 	mov rdi, .fs_tab
   404 00000225 [B702000000000000]  <1>
   405 0000022D 4889DE              <1> 	mov rsi, rbx
   406 00000230 EB49                <1> 	jmp .printf
   407                              <1> 	
   408                              <1> .ch_page:
   409 00000232 48BF-               <1> 	mov rdi, .fs_page
   409 00000234 [BA02000000000000]  <1>
   410 0000023C 4889DE              <1> 	mov rsi, rbx
   411 0000023F EB3A                <1> 	jmp .printf
   412                              <1> 	
   413                              <1> .ch_return:
   414 00000241 48BF-               <1> 	mov rdi, .fs_return
   414 00000243 [BD02000000000000]  <1>
   415 0000024B 4889DE              <1> 	mov rsi, rbx
   416 0000024E EB2B                <1> 	jmp .printf
   417                              <1> 
   418                              <1> .ch_newline:
   419 00000250 48BF-               <1> 	mov rdi, .fs_newline
   419 00000252 [C002000000000000]  <1>
   420 0000025A 4889DE              <1> 	mov rsi, rbx
   421 0000025D EB1C                <1> 	jmp .printf
   422                              <1> 
   423                              <1> .ch_doublequote:
   424 0000025F 48BF-               <1> 	mov rdi, .fs_doublequote
   424 00000261 [C302000000000000]  <1>
   425 00000269 4889DE              <1> 	mov rsi, rbx
   426 0000026C EB0D                <1> 	jmp .printf
   427                              <1> 
   428                              <1> .ch_backslash:
   429 0000026E 48BF-               <1> 	mov rdi, .fs_backslash
   429 00000270 [C602000000000000]  <1>
   430 00000278 4889DE              <1> 	mov rsi, rbx
   431                              <1> 
   432                              <1> .printf:
   433 0000027B 50                  <1> 	push rax
   434 0000027C 51                  <1> 	push rcx
   435 0000027D B800000000          <1> 	mov rax, 0
   436 00000282 E8(00000000)        <1> 	call printf
   437 00000287 59                  <1> 	pop rcx
   438 00000288 58                  <1> 	pop rax
   439                              <1> 
   440 00000289 48FFC9              <1> 	dec rcx
   441 0000028C 48FFC0              <1> 	inc rax
   442 0000028F E934FFFFFF          <1> 	jmp .loop
   443                              <1> 
   444                              <1> .done:
   445 00000294 B800000000          <1> 	mov rax, 0
   446 00000299 48BF-               <1> 	mov rdi, .double_quote
   446 0000029B [AA02000000000000]  <1>
   447 000002A3 E8(00000000)        <1> 	call printf
   448                              <1> 
   449 000002A8 C9                  <1> 	leave
   450 000002A9 C3                  <1> 	ret
   451                              <1> section .data
   452                              <1> .double_quote:
   453 000002AA 2200                <1> 	db CHAR_DOUBLEQUOTE, 0
   454                              <1> .fs_simple_char:
   455 000002AC 256300              <1> 	db "%c", 0
   456                              <1> .fs_hex_char:
   457 000002AF 5C78253032783B00    <1> 	db "\x%02x;", 0	
   458                              <1> .fs_tab:
   459 000002B7 5C7400              <1> 	db "\t", 0
   460                              <1> .fs_page:
   461 000002BA 5C6600              <1> 	db "\f", 0
   462                              <1> .fs_return:
   463 000002BD 5C7200              <1> 	db "\r", 0
   464                              <1> .fs_newline:
   465 000002C0 5C6E00              <1> 	db "\n", 0
   466                              <1> .fs_doublequote:
   467 000002C3 5C2200              <1> 	db CHAR_BACKSLASH, CHAR_DOUBLEQUOTE, 0
   468                              <1> .fs_backslash:
   469 000002C6 5C5C00              <1> 	db CHAR_BACKSLASH, CHAR_BACKSLASH, 0
   470                              <1> 
   471                              <1> write_sob_pair:
   472 000002C9 55                  <1> 	push rbp
   473 000002CA 4889E5              <1> 	mov rbp, rsp
   474                              <1> 
   475 000002CD 56                  <1> 	push rsi
   476                              <1> 	
   477 000002CE B800000000          <1> 	mov rax, 0
   478 000002D3 48BF-               <1> 	mov rdi, .open_paren
   478 000002D5 [1603000000000000]  <1>
   479 000002DD E8(00000000)        <1> 	call printf
   480                              <1> 
   481 000002E2 488B3424            <1> 	mov rsi, [rsp]
   482                              <1> 
   483                              <1> 	CAR rsi, rsi
   483 000002E6 488B7601            <2>  mov %1, qword [%2+TYPE_SIZE]
   484 000002EA E8(1A000000)        <1> 	call write_sob
   485                              <1> 
   486 000002EF 488B3424            <1> 	mov rsi, [rsp]
   487                              <1> 	CDR rsi, rsi
   487 000002F3 488B7609            <2>  mov %1, qword [%2+TYPE_SIZE+WORD_SIZE]
   488 000002F7 E81E000000          <1> 	call write_sob_pair_on_cdr
   489                              <1> 	
   490 000002FC 4883C408            <1> 	add rsp, 1*8
   491                              <1> 	
   492 00000300 48BF-               <1> 	mov rdi, .close_paren
   492 00000302 [1803000000000000]  <1>
   493 0000030A B800000000          <1> 	mov rax, 0
   494 0000030F E8(00000000)        <1> 	call printf
   495                              <1> 
   496 00000314 C9                  <1> 	leave
   497 00000315 C3                  <1> 	ret
   498                              <1> 
   499                              <1> section .data
   500                              <1> .open_paren:
   501 00000316 2800                <1> 	db "(", 0
   502                              <1> .close_paren:
   503 00000318 2900                <1> 	db ")", 0
   504                              <1> 
   505                              <1> write_sob_pair_on_cdr:
   506 0000031A 55                  <1> 	push rbp
   507 0000031B 4889E5              <1> 	mov rbp, rsp
   508                              <1> 
   509 0000031E 8A1E                <1> 	mov bl, byte [rsi]
   510 00000320 80FB02              <1> 	cmp bl, T_NIL
   511 00000323 7450                <1> 	je .done
   512                              <1> 	
   513 00000325 80FB0A              <1> 	cmp bl, T_PAIR
   514 00000328 741D                <1> 	je .cdrIsPair
   515                              <1> 	
   516 0000032A 56                  <1> 	push rsi
   517                              <1> 	
   518 0000032B B800000000          <1> 	mov rax, 0
   519 00000330 48BF-               <1> 	mov rdi, .dot
   519 00000332 [7903000000000000]  <1>
   520 0000033A E8(00000000)        <1> 	call printf
   521                              <1> 	
   522 0000033F 5E                  <1> 	pop rsi
   523                              <1> 
   524 00000340 E8(1A000000)        <1> 	call write_sob
   525 00000345 EB2E                <1> 	jmp .done
   526                              <1> 
   527                              <1> .cdrIsPair:
   528                              <1> 	CDR rbx, rsi
   528 00000347 488B5E09            <2>  mov %1, qword [%2+TYPE_SIZE+WORD_SIZE]
   529 0000034B 53                  <1> 	push rbx
   530                              <1> 	CAR rsi, rsi
   530 0000034C 488B7601            <2>  mov %1, qword [%2+TYPE_SIZE]
   531 00000350 56                  <1> 	push rsi
   532                              <1> 	
   533 00000351 B800000000          <1> 	mov rax, 0
   534 00000356 48BF-               <1> 	mov rdi, .space
   534 00000358 [7703000000000000]  <1>
   535 00000360 E8(00000000)        <1> 	call printf
   536                              <1> 	
   537 00000365 5E                  <1> 	pop rsi
   538 00000366 E8(1A000000)        <1> 	call write_sob
   539                              <1> 
   540 0000036B 5E                  <1> 	pop rsi
   541 0000036C E8A9FFFFFF          <1> 	call write_sob_pair_on_cdr
   542                              <1> 
   543 00000371 4883C408            <1> 	add rsp, 1*8
   544                              <1> 
   545                              <1> .done:
   546 00000375 C9                  <1> 	leave
   547 00000376 C3                  <1> 	ret
   548                              <1> 
   549                              <1> section .data
   550                              <1> .space:
   551 00000377 2000                <1> 	db " ", 0
   552                              <1> .dot:
   553 00000379 202E2000            <1> 	db " . ", 0
   554                              <1> 
   555                              <1> write_sob_symbol:
   556 0000037D 55                  <1> 	push rbp
   557 0000037E 4889E5              <1> 	mov rbp, rsp
   558                              <1> 
   559                              <1> 	SYMBOL_VAL rsi, rsi
   559 00000381 488B7601            <2>  mov %1, qword [%2+TYPE_SIZE]
   560                              <1> 	
   561                              <1> 	STRING_LENGTH rcx, rsi
   561 00000385 488B4E01            <2>  mov %1, qword [%2+TYPE_SIZE]
   562                              <1> 	STRING_ELEMENTS rax, rsi
   562 00000389 488D4609            <2>  lea %1, [%2+TYPE_SIZE+WORD_SIZE]
   563                              <1> 
   564 0000038D 4889CA              <1> 	mov rdx, rcx
   565                              <1> 
   566                              <1> .loop:
   567 00000390 4883F900            <1> 	cmp rcx, 0
   568 00000394 7452                <1> 	je .done
   569 00000396 8A18                <1> 	mov bl, byte [rax]
   570 00000398 4881E3FF000000      <1> 	and rbx, 0xff
   571                              <1> 
   572 0000039F 4839D1              <1> 	cmp rcx, rdx
   573 000003A2 7512                <1> 	jne .ch_simple
   574 000003A4 4883FB2B            <1> 	cmp rbx, '+'
   575 000003A8 741B                <1> 	je .ch_hex
   576 000003AA 4883FB2D            <1> 	cmp rbx, '-'
   577 000003AE 7415                <1> 	je .ch_hex
   578 000003B0 4883FB41            <1> 	cmp rbx, 'A'
   579 000003B4 7C0F                <1> 	jl .ch_hex
   580                              <1> 
   581                              <1> .ch_simple:
   582 000003B6 48BF-               <1> 	mov rdi, .fs_simple_char
   582 000003B8 [EA03000000000000]  <1>
   583 000003C0 4889DE              <1> 	mov rsi, rbx
   584 000003C3 EB0D                <1> 	jmp .printf
   585                              <1> 	
   586                              <1> .ch_hex:
   587 000003C5 48BF-               <1> 	mov rdi, .fs_hex_char
   587 000003C7 [ED03000000000000]  <1>
   588 000003CF 4889DE              <1> 	mov rsi, rbx
   589                              <1> 
   590                              <1> .printf:
   591 000003D2 50                  <1> 	push rax
   592 000003D3 51                  <1> 	push rcx
   593 000003D4 B800000000          <1> 	mov rax, 0
   594 000003D9 E8(00000000)        <1> 	call printf
   595 000003DE 59                  <1> 	pop rcx
   596 000003DF 58                  <1> 	pop rax
   597                              <1> 
   598 000003E0 48FFC9              <1> 	dec rcx
   599 000003E3 48FFC0              <1> 	inc rax
   600 000003E6 EBA8                <1> 	jmp .loop
   601                              <1> 
   602                              <1> .done:
   603 000003E8 C9                  <1> 	leave
   604 000003E9 C3                  <1> 	ret
   605                              <1> 	
   606                              <1> section .data
   607                              <1> .fs_simple_char:
   608 000003EA 256300              <1> 	db "%c", 0
   609                              <1> .fs_hex_char:
   610 000003ED 5C78253032783B00    <1> 	db "\x%02x;", 0	
   611                              <1> 
   612                              <1> write_sob_closure:
   613 000003F5 55                  <1> 	push rbp
   614 000003F6 4889E5              <1> 	mov rbp, rsp
   615                              <1> 
   616                              <1> 	CLOSURE_CODE rdx, rsi
   616 000003F9 488B5609            <2>  mov %1, qword [%2+TYPE_SIZE+WORD_SIZE]
   617                              <1> 	CLOSURE_ENV rsi, rsi
   617 000003FD 488B7601            <2>  mov %1, qword [%2+TYPE_SIZE]
   618                              <1> 
   619 00000401 48BF-               <1> 	mov rdi, .closure
   619 00000403 [1704000000000000]  <1>
   620 0000040B B800000000          <1> 	mov rax, 0
   621 00000410 E8(00000000)        <1> 	call printf
   622                              <1> 
   623 00000415 C9                  <1> 	leave
   624 00000416 C3                  <1> 	ret
   625                              <1> section .data
   626                              <1> .closure:
   627 00000417 233C636C6F73757265- <1> 	db "#<closure [env:%p, code:%p]>", 0
   627 00000420 205B656E763A25702C- <1>
   627 00000429 20636F64653A25705D- <1>
   627 00000432 3E00                <1>
   628                              <1> 
   629                              <1> section .text
   630                              <1> write_sob:
   631 0000001A BB00000000          <1> 	mov rbx, 0
   632 0000001F 8A1E                <1> 	mov bl, byte [rsi]	
   633 00000021 FF24DD[34040000]    <1> 	jmp qword [.jmp_table + rbx * 8]
   634                              <1> 
   635                              <1> section .data
   636                              <1> .jmp_table:
   637 00000434 [0000000000000000]- <1> 	dq write_sob_undefined, write_sob_void, write_sob_nil
   637 0000043C [3501000000000000]- <1>
   637 00000444 [8901000000000000]  <1>
   638 0000044C [0D00000000000000]- <1> 	dq write_sob_integer, write_sob_float, write_sob_bool
   638 00000454 [2F00000000000000]- <1>
   638 0000045C [5701000000000000]  <1>
   639 00000464 [5F00000000000000]- <1> 	dq write_sob_char, write_sob_string, write_sob_symbol
   639 0000046C [A601000000000000]- <1>
   639 00000474 [7D03000000000000]  <1>
   640 0000047C [F503000000000000]- <1> 	dq write_sob_closure, write_sob_pair
   640 00000484 [C902000000000000]  <1>
   641                              <1> 
   642                              <1> section .text
   643                              <1> write_sob_if_not_void:
   644 00000028 4889C6              <1> 	mov rsi, rax
   645 0000002B 8A1E                <1> 	mov bl, byte [rsi]
   646 0000002D 80FB01              <1> 	cmp bl, SOB_VOID
   647 00000030 7419                <1> 	je .continue
   648                              <1> 
   649 00000032 E8E3FFFFFF          <1> 	call write_sob
   650                              <1> 	
   651 00000037 B800000000          <1> 	mov rax, 0
   652 0000003C 48BF-               <1> 	mov rdi, .newline
   652 0000003E [8C04000000000000]  <1>
   653 00000046 E8(00000000)        <1> 	call printf
   654                              <1> 	
   655                              <1> .continue:
   656 0000004B C3                  <1> 	ret
   657                              <1> section .data
   658                              <1> .newline:
   659 0000048C 0A00                <1> 	db CHAR_NEWLINE, 0
     5                                  
     6                                  %macro MAKE_LITERAL 2
     7                                  	db %1
     8                                  	%2
     9                                  %endmacro
    10                                  	
    11                                  section .bss
    12                                  ;;; This pointer is used to manage allocations on our heap.
    13                                  malloc_pointer:
    14 00000000 <res 00000008>              resq 1
    15                                  
    16                                  section .text
    17                                  const_tbl:
    18                                  
    19                                  ;; MAKE_VOID
    20 0000004C 02                      	MAKE_NIL
    21 0000004D 0005                    	MAKE_LITERAL db 0, 5
    22                                  ;; MAKE_BOOL(1)
    23                                  ;; MAKE_LITERAL_INT(1)
    24                                  
    25                                  ;;; These macro definitions are required for the primitive
    26                                  ;;; definitions in the epilogue to work properly
    27                                  %define SOB_VOID_ADDRESS const_tbl+0
    28                                  %define SOB_NIL_ADDRESS const_tbl+1
    29                                  %define SOB_FALSE_ADDRESS const_tbl+2
    30                                  %define SOB_TRUE_ADDRESS const_tbl+4
    31                                  
    32                                  fvar_tbl:
    33                                  
    34                                  
    35                                  global main
    36                                  section .text
    37                                  main:
    38 0000004F 55                          push rbp
    39                                  
    40                                      ;; set up the heap
    41 00000050 48BF00000000010000-         mov rdi, GB(4)
    41 00000059 00                 
    42 0000005A E8(00000000)                call malloc
    43 0000005F 48890425[00000000]          mov [malloc_pointer], rax
    44                                  
    45                                      ;; Set up the dummy activation frame
    46                                      ;; The dummy return address is T_UNDEFINED
    47                                      ;; (which a is a macro for 0) so that returning
    48                                      ;; from the top level (which SHOULD NOT HAPPEN
    49                                      ;; AND IS A BUG) will cause a segfault.
    50 00000067 6A00                        push 0
    51 00000069 68[4D000000]                push qword SOB_NIL_ADDRESS
    52 0000006E 6A00                        push qword T_UNDEFINED
    53 00000070 54                          push rsp
    54 00000071 4889E5                      mov rbp,rsp
    55                                  
    56                                      ;; Set up the primitive stdlib fvars:
    57                                      ;; Since the primtive procedures are defined in assembly,
    58                                      ;; they are not generated by scheme (define ...) expressions.
    59                                      ;; This is where we emulate the missing (define ...) expressions
    60                                      ;; for all the primitive procedures.
    61                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    62                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    63                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    64                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    65                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    66                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    67                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    68                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    69                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    70                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    71                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    72                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    73                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    74                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    75                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    76                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    77                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    78                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    79                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    80                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    81                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    82                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    83                                  ;NULLIFIEDmake_primitive_closureNULLIFIED
    84                                  
    85                                  user_code_fragment:
    86                                  ;;; The code you compiled will be catenated here.
    87                                  ;;; It will be executed immediately after the closures for 
    88                                  ;;; the primitive procedures are set up.
    89                                  
    90 00000074 488B0425[52000000]      mov rax, qword[const_tbl+6*1]
    91 0000007C E8A7FFFFFF              	call write_sob_if_not_void
    92                                  
    93 00000081 B800000000              	mov rax, 0
    94 00000086 4883C420                	add rsp, 4*8
    95 0000008A 5D                      	pop rbp
    96 0000008B C3                      	ret
    97                                  
    98                                  is_boolean:
    99 0000008C 55                          push rbp
   100 0000008D 4889E5                      mov rbp, rsp
   101                                  
   102 00000090 488B7520                    mov rsi, PVAR(0)
   103 00000094 408A36                      mov sil, byte [rsi]
   104                                  
   105 00000097 4080FE05                    cmp sil, T_BOOL
   106 0000009B 750C                        jne .wrong_type
   107 0000009D 48B8-                       mov rax, SOB_TRUE_ADDRESS
   107 0000009F [5000000000000000] 
   108 000000A7 EB0A                        jmp .return
   109                                  
   110                                  .wrong_type:
   111 000000A9 48B8-                       mov rax, SOB_FALSE_ADDRESS
   111 000000AB [4E00000000000000] 
   112                                  .return:
   113 000000B3 C9                          leave
   114 000000B4 C3                          ret
   115                                  
   116                                  is_float:
   117 000000B5 55                          push rbp
   118 000000B6 4889E5                      mov rbp, rsp
   119                                  
   120 000000B9 488B7520                    mov rsi, PVAR(0)
   121 000000BD 408A36                      mov sil, byte [rsi]
   122                                  
   123 000000C0 4080FE04                    cmp sil, T_FLOAT
   124 000000C4 750C                        jne .wrong_type
   125 000000C6 48B8-                       mov rax, SOB_TRUE_ADDRESS
   125 000000C8 [5000000000000000] 
   126 000000D0 EB0A                        jmp .return
   127                                  
   128                                  .wrong_type:
   129 000000D2 48B8-                       mov rax, SOB_FALSE_ADDRESS
   129 000000D4 [4E00000000000000] 
   130                                  .return:
   131 000000DC C9                          leave
   132 000000DD C3                          ret
   133                                  
   134                                  is_integer:
   135 000000DE 55                          push rbp
   136 000000DF 4889E5                      mov rbp, rsp
   137                                  
   138 000000E2 488B7520                    mov rsi, PVAR(0)
   139 000000E6 408A36                      mov sil, byte [rsi]
   140                                  
   141 000000E9 4080FE03                    cmp sil, T_INTEGER
   142 000000ED 750C                        jne .wrong_type
   143 000000EF 48B8-                       mov rax, SOB_TRUE_ADDRESS
   143 000000F1 [5000000000000000] 
   144 000000F9 EB0A                        jmp .return
   145                                  
   146                                  .wrong_type:
   147 000000FB 48B8-                       mov rax, SOB_FALSE_ADDRESS
   147 000000FD [4E00000000000000] 
   148                                  .return:
   149 00000105 C9                          leave
   150 00000106 C3                          ret
   151                                  
   152                                  is_pair:
   153 00000107 55                          push rbp
   154 00000108 4889E5                      mov rbp, rsp
   155                                  
   156 0000010B 488B7520                    mov rsi, PVAR(0)
   157 0000010F 408A36                      mov sil, byte [rsi]
   158                                  
   159 00000112 4080FE0A                    cmp sil, T_PAIR
   160 00000116 750C                        jne .wrong_type
   161 00000118 48B8-                       mov rax, SOB_TRUE_ADDRESS
   161 0000011A [5000000000000000] 
   162 00000122 EB0A                        jmp .return
   163                                  
   164                                  .wrong_type:
   165 00000124 48B8-                       mov rax, SOB_FALSE_ADDRESS
   165 00000126 [4E00000000000000] 
   166                                  .return:
   167 0000012E C9                          leave
   168 0000012F C3                          ret
   169                                  
   170                                  is_null:
   171 00000130 55                          push rbp
   172 00000131 4889E5                      mov rbp, rsp
   173                                  
   174 00000134 488B7520                    mov rsi, PVAR(0)
   175 00000138 408A36                      mov sil, byte [rsi]
   176                                  
   177 0000013B 4080FE02                    cmp sil, T_NIL
   178 0000013F 750C                        jne .wrong_type
   179 00000141 48B8-                       mov rax, SOB_TRUE_ADDRESS
   179 00000143 [5000000000000000] 
   180 0000014B EB0A                        jmp .return
   181                                  
   182                                  .wrong_type:
   183 0000014D 48B8-                       mov rax, SOB_FALSE_ADDRESS
   183 0000014F [4E00000000000000] 
   184                                  .return:
   185 00000157 C9                          leave
   186 00000158 C3                          ret
   187                                  
   188                                  is_char:
   189 00000159 55                          push rbp
   190 0000015A 4889E5                      mov rbp, rsp
   191                                  
   192 0000015D 488B7520                    mov rsi, PVAR(0)
   193 00000161 408A36                      mov sil, byte [rsi]
   194                                  
   195 00000164 4080FE06                    cmp sil, T_CHAR
   196 00000168 750C                        jne .wrong_type
   197 0000016A 48B8-                       mov rax, SOB_TRUE_ADDRESS
   197 0000016C [5000000000000000] 
   198 00000174 EB0A                        jmp .return
   199                                  
   200                                  .wrong_type:
   201 00000176 48B8-                       mov rax, SOB_FALSE_ADDRESS
   201 00000178 [4E00000000000000] 
   202                                  .return:
   203 00000180 C9                          leave
   204 00000181 C3                          ret
   205                                  
   206                                  is_string:
   207 00000182 55                          push rbp
   208 00000183 4889E5                      mov rbp, rsp
   209                                  
   210 00000186 488B7520                    mov rsi, PVAR(0)
   211 0000018A 408A36                      mov sil, byte [rsi]
   212                                  
   213 0000018D 4080FE07                    cmp sil, T_STRING
   214 00000191 750C                        jne .wrong_type
   215 00000193 48B8-                       mov rax, SOB_TRUE_ADDRESS
   215 00000195 [5000000000000000] 
   216 0000019D EB0A                        jmp .return
   217                                  
   218                                  .wrong_type:
   219 0000019F 48B8-                       mov rax, SOB_FALSE_ADDRESS
   219 000001A1 [4E00000000000000] 
   220                                  .return:
   221 000001A9 C9                          leave
   222 000001AA C3                          ret
   223                                  
   224                                  is_procedure:
   225 000001AB 55                          push rbp
   226 000001AC 4889E5                      mov rbp, rsp
   227                                  
   228 000001AF 488B7520                    mov rsi, PVAR(0)
   229 000001B3 408A36                      mov sil, byte [rsi]
   230                                  
   231 000001B6 4080FE09                    cmp sil, T_CLOSURE
   232 000001BA 750C                        jne .wrong_type
   233 000001BC 48B8-                       mov rax, SOB_TRUE_ADDRESS
   233 000001BE [5000000000000000] 
   234 000001C6 EB0A                        jmp .return
   235                                  
   236                                  .wrong_type:
   237 000001C8 48B8-                       mov rax, SOB_FALSE_ADDRESS
   237 000001CA [4E00000000000000] 
   238                                  .return:
   239 000001D2 C9                          leave
   240 000001D3 C3                          ret
   241                                  
   242                                  is_symbol:
   243 000001D4 55                          push rbp
   244 000001D5 4889E5                      mov rbp, rsp
   245                                  
   246 000001D8 488B7520                    mov rsi, PVAR(0)
   247 000001DC 408A36                      mov sil, byte [rsi]
   248                                  
   249 000001DF 4080FE08                    cmp sil, T_SYMBOL
   250 000001E3 750C                        jne .wrong_type
   251 000001E5 48B8-                       mov rax, SOB_TRUE_ADDRESS
   251 000001E7 [5000000000000000] 
   252 000001EF EB0A                        jmp .return
   253                                  
   254                                  .wrong_type:
   255 000001F1 48B8-                       mov rax, SOB_FALSE_ADDRESS
   255 000001F3 [4E00000000000000] 
   256                                  .return:
   257 000001FB C9                          leave
   258 000001FC C3                          ret
   259                                  
   260                                  string_length:
   261 000001FD 55                          push rbp
   262 000001FE 4889E5                      mov rbp, rsp
   263                                  
   264 00000201 488B7520                    mov rsi, PVAR(0)
   265                                      STRING_LENGTH rsi, rsi
   265 00000205 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   266                                      MAKE_INT(rax, rsi)
   266                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   266 00000209 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   266 00000211 09                  <2>
   266 00000212 6A09                <2>  push %2
   266 00000214 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   266 0000021C 482B0424            <2>  sub %1, [rsp]
   266 00000220 4883C408            <2>  add rsp, 8
   266 00000224 C60003              <1>  mov byte [%1], %3
   266 00000227 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   267                                  
   268 0000022B C9                          leave
   269 0000022C C3                          ret
   270                                  
   271                                  string_ref:
   272 0000022D 55                          push rbp
   273 0000022E 4889E5                      mov rbp, rsp
   274                                  
   275 00000231 488B7520                    mov rsi, PVAR(0) 
   276                                      STRING_ELEMENTS rsi, rsi
   276 00000235 488D7609            <1>  lea %1, [%2+TYPE_SIZE+WORD_SIZE]
   277 00000239 488B7D28                    mov rdi, PVAR(1)
   278                                      INT_VAL rdi, rdi
   278 0000023D 488B7F01            <1>  mov %1, qword [%2+TYPE_SIZE]
   279 00000241 48C1E700                    shl rdi, 0
   280 00000245 4801FE                      add rsi, rdi
   281                                  
   282 00000248 408A36                      mov sil, byte [rsi]
   283                                      MAKE_CHAR(rax, sil)
   283                              <1>  MALLOC %1, 1+TYPE_SIZE
   283 0000024B 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   283 00000253 02                  <2>
   283 00000254 6A02                <2>  push %2
   283 00000256 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   283 0000025E 482B0424            <2>  sub %1, [rsp]
   283 00000262 4883C408            <2>  add rsp, 8
   283 00000266 C60006              <1>  mov byte [%1], T_CHAR
   283 00000269 40887001            <1>  mov byte [%1+TYPE_SIZE], %2
   284                                  
   285 0000026D C9                          leave
   286 0000026E C3                          ret
   287                                  
   288                                  string_set:
   289 0000026F 55                          push rbp
   290 00000270 4889E5                      mov rbp, rsp
   291                                  
   292 00000273 488B7520                    mov rsi, PVAR(0) 
   293                                      STRING_ELEMENTS rsi, rsi
   293 00000277 488D7609            <1>  lea %1, [%2+TYPE_SIZE+WORD_SIZE]
   294 0000027B 488B7D28                    mov rdi, PVAR(1)
   295                                      INT_VAL rdi, rdi
   295 0000027F 488B7F01            <1>  mov %1, qword [%2+TYPE_SIZE]
   296 00000283 48C1E700                    shl rdi, 0
   297 00000287 4801FE                      add rsi, rdi
   298                                  
   299 0000028A 488B4530                    mov rax, PVAR(2)
   300                                      CHAR_VAL rax, rax
   300 0000028E 480FB64001          <1>  movzx %1, byte [%2+TYPE_SIZE]
   301 00000293 8806                        mov byte [rsi], al
   302 00000295 48B8-                       mov rax, SOB_VOID_ADDRESS
   302 00000297 [4C00000000000000] 
   303                                  
   304 0000029F C9                          leave
   305 000002A0 C3                          ret
   306                                  
   307                                  make_string:
   308 000002A1 55                          push rbp
   309 000002A2 4889E5                      mov rbp, rsp
   310                                  
   311                                      
   312 000002A5 488B7520                    mov rsi, PVAR(0)
   313                                      INT_VAL rsi, rsi
   313 000002A9 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   314 000002AD 488B7D28                    mov rdi, PVAR(1)
   315                                      CHAR_VAL rdi, rdi
   315 000002B1 480FB67F01          <1>  movzx %1, byte [%2+TYPE_SIZE]
   316 000002B6 4881E7FF000000              and rdi, 255
   317                                  
   318                                      MAKE_STRING rax, rsi, dil
   318 000002BD 488D4609            <1>  lea %1, [%2+WORD_SIZE+TYPE_SIZE]
   318                              <1>  MALLOC %1, %1
   318 000002C1 48010425[00000000]  <2>  add qword [malloc_pointer], %2
   318 000002C9 50                  <2>  push %2
   318 000002CA 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   318 000002D2 482B0424            <2>  sub %1, [rsp]
   318 000002D6 4883C408            <2>  add rsp, 8
   318 000002DA C60007              <1>  mov byte [%1], T_STRING
   318 000002DD 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   318 000002E1 51                  <1>  push rcx
   318 000002E2 4883C009            <1>  add %1,WORD_SIZE+TYPE_SIZE
   318 000002E6 4889F1              <1>  mov rcx, %2
   318 000002E9 4883F900            <1>  cmp rcx, 0
   318                              <1> %%str_loop:
   318 000002ED 7409                <1>  jz %%str_loop_end
   318 000002EF 48FFC9              <1>  dec rcx
   318 000002F2 40883C08            <1>  mov byte [%1+rcx], %3
   318 000002F6 EBF5                <1>  jmp %%str_loop
   318                              <1> %%str_loop_end:
   318 000002F8 59                  <1>  pop rcx
   318 000002F9 4883E809            <1>  sub %1, WORD_SIZE+TYPE_SIZE
   319                                  
   320 000002FD C9                          leave
   321 000002FE C3                          ret
   322                                  
   323                                  symbol_to_string:
   324 000002FF 55                          push rbp
   325 00000300 4889E5                      mov rbp, rsp
   326                                  
   327                                      
   328 00000303 488B7520                    mov rsi, PVAR(0)
   329                                      SYMBOL_VAL rsi, rsi
   329 00000307 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   330                                      
   331                                      STRING_LENGTH rcx, rsi
   331 0000030B 488B4E01            <1>  mov %1, qword [%2+TYPE_SIZE]
   332                                      STRING_ELEMENTS rdi, rsi
   332 0000030F 488D7E09            <1>  lea %1, [%2+TYPE_SIZE+WORD_SIZE]
   333                                  
   334 00000313 51                          push rcx
   335 00000314 57                          push rdi
   336                                  
   337 00000315 408A3F                      mov dil, byte [rdi]
   338                                      MAKE_CHAR(rax, dil)
   338                              <1>  MALLOC %1, 1+TYPE_SIZE
   338 00000318 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   338 00000320 02                  <2>
   338 00000321 6A02                <2>  push %2
   338 00000323 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   338 0000032B 482B0424            <2>  sub %1, [rsp]
   338 0000032F 4883C408            <2>  add rsp, 8
   338 00000333 C60006              <1>  mov byte [%1], T_CHAR
   338 00000336 40887801            <1>  mov byte [%1+TYPE_SIZE], %2
   339 0000033A 50                          push rax
   340                                      MAKE_INT(rax, rcx)
   340                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   340 0000033B 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   340 00000343 09                  <2>
   340 00000344 6A09                <2>  push %2
   340 00000346 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   340 0000034E 482B0424            <2>  sub %1, [rsp]
   340 00000352 4883C408            <2>  add rsp, 8
   340 00000356 C60003              <1>  mov byte [%1], %3
   340 00000359 48894801            <1>  mov qword [%1+TYPE_SIZE], %2
   341 0000035D 50                          push rax
   342 0000035E 6A02                        push 2
   343 00000360 68[4D000000]                push SOB_NIL_ADDRESS
   344 00000365 E837FFFFFF                  call make_string
   345 0000036A 4883C420                    add rsp, 4*8
   346                                  
   347                                      STRING_ELEMENTS rsi, rax
   347 0000036E 488D7009            <1>  lea %1, [%2+TYPE_SIZE+WORD_SIZE]
   348                                  
   349 00000372 5F                          pop rdi
   350 00000373 59                          pop rcx
   351                                  
   352 00000374 4883F900                    cmp rcx, 0
   353 00000378 7410                        je .end
   354                                  	
   355                                  .loop:
   356 0000037A 4C8D040F                    lea r8, [rdi+rcx]
   357 0000037E 4C8D0C0E                    lea r9, [rsi+rcx]
   358                                  
   359 00000382 418A18                      mov bl, byte [r8]
   360 00000385 418819                      mov byte [r9], bl
   361                                      
   362 00000388 E2F0                        loop .loop
   363                                  .end:
   364                                  
   365 0000038A C9                          leave
   366 0000038B C3                          ret
   367                                  
   368                                  char_to_integer:
   369 0000038C 55                          push rbp
   370 0000038D 4889E5                      mov rbp, rsp
   371                                  
   372                                      
   373 00000390 488B7520                    mov rsi, PVAR(0)
   374                                      CHAR_VAL rsi, rsi
   374 00000394 480FB67601          <1>  movzx %1, byte [%2+TYPE_SIZE]
   375 00000399 4881E6FF000000              and rsi, 255
   376                                      MAKE_INT(rax, rsi)
   376                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   376 000003A0 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   376 000003A8 09                  <2>
   376 000003A9 6A09                <2>  push %2
   376 000003AB 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   376 000003B3 482B0424            <2>  sub %1, [rsp]
   376 000003B7 4883C408            <2>  add rsp, 8
   376 000003BB C60003              <1>  mov byte [%1], %3
   376 000003BE 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   377                                  
   378 000003C2 C9                          leave
   379 000003C3 C3                          ret
   380                                  
   381                                  integer_to_char:
   382 000003C4 55                          push rbp
   383 000003C5 4889E5                      mov rbp, rsp
   384                                  
   385                                      
   386 000003C8 488B7520                    mov rsi, PVAR(0)
   387                                      INT_VAL rsi, rsi
   387 000003CC 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   388 000003D0 4881E6FF000000              and rsi, 255
   389                                      MAKE_CHAR(rax, sil)
   389                              <1>  MALLOC %1, 1+TYPE_SIZE
   389 000003D7 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   389 000003DF 02                  <2>
   389 000003E0 6A02                <2>  push %2
   389 000003E2 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   389 000003EA 482B0424            <2>  sub %1, [rsp]
   389 000003EE 4883C408            <2>  add rsp, 8
   389 000003F2 C60006              <1>  mov byte [%1], T_CHAR
   389 000003F5 40887001            <1>  mov byte [%1+TYPE_SIZE], %2
   390                                  
   391 000003F9 C9                          leave
   392 000003FA C3                          ret
   393                                  
   394                                  is_eq:
   395 000003FB 55                          push rbp
   396 000003FC 4889E5                      mov rbp, rsp
   397                                  
   398                                      
   399 000003FF 488B7520                    mov rsi, PVAR(0)
   400 00000403 488B7D28                    mov rdi, PVAR(1)
   401 00000407 4839FE                      cmp rsi, rdi
   402 0000040A 740C                        je .true
   403 0000040C 48B8-                       mov rax, SOB_FALSE_ADDRESS
   403 0000040E [4E00000000000000] 
   404 00000416 EB0A                        jmp .return
   405                                  
   406                                  .true:
   407 00000418 48B8-                       mov rax, SOB_TRUE_ADDRESS
   407 0000041A [5000000000000000] 
   408                                  
   409                                  .return:
   410 00000422 C9                          leave
   411 00000423 C3                          ret
   412                                  
   413                                  bin_add:
   414 00000424 55                          push rbp
   415 00000425 4889E5                      mov rbp, rsp
   416                                  
   417 00000428 41B800000000                mov r8, 0
   418                                  
   419 0000042E 488B7520                    mov rsi, PVAR(0)
   420 00000432 56                          push rsi
   421 00000433 6A01                        push 1
   422 00000435 68[4D000000]                push SOB_NIL_ADDRESS
   423 0000043A E876FCFFFF                  call is_float
   424 0000043F 4883C418                    add rsp, 3*WORD_SIZE 
   425                                  
   426                                  
   427 00000443 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   428 00000449 7404                        je .test_next
   429 0000044B 4983C801                    or r8, 1
   430                                  
   431                                  .test_next:
   432                                  
   433 0000044F 488B7528                    mov rsi, PVAR(1)
   434 00000453 56                          push rsi
   435 00000454 6A01                        push 1
   436 00000456 68[4D000000]                push SOB_NIL_ADDRESS
   437 0000045B E855FCFFFF                  call is_float
   438 00000460 4883C418                    add rsp, 3*WORD_SIZE 
   439                                  
   440                                  
   441 00000464 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   442 0000046A 7404                        je .load_numbers
   443 0000046C 4983C802                    or r8, 2
   444                                  
   445                                  .load_numbers:
   446 00000470 4150                        push r8
   447                                  
   448 00000472 49D1E8                      shr r8, 1
   449 00000475 720F                        jc .first_arg_int
   450 00000477 488B7520                    mov rsi, PVAR(0)
   451                                      FLOAT_VAL rsi, rsi 
   451 0000047B 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   452 0000047F 66480F6EC6                  movq xmm0, rsi
   453 00000484 EB0D                        jmp .load_next_float
   454                                  
   455                                  .first_arg_int:
   456 00000486 488B7520                    mov rsi, PVAR(0)
   457                                      INT_VAL rsi, rsi
   457 0000048A 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   458 0000048E F2480F2AC6                  cvtsi2sd xmm0, rsi
   459                                  
   460                                  .load_next_float:
   461 00000493 49D1E8                      shr r8, 1
   462 00000496 720F                        jc .second_arg_int
   463 00000498 488B7528                    mov rsi, PVAR(1)
   464                                      FLOAT_VAL rsi, rsi
   464 0000049C 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   465 000004A0 66480F6ECE                  movq xmm1, rsi
   466 000004A5 EB0D                        jmp .perform_float_op
   467                                  
   468                                  .second_arg_int:
   469 000004A7 488B7528                    mov rsi, PVAR(1)
   470                                      INT_VAL rsi, rsi
   470 000004AB 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   471 000004AF F2480F2ACE                  cvtsi2sd xmm1, rsi
   472                                  
   473                                  .perform_float_op:
   474 000004B4 F20F58C1                    addsd xmm0, xmm1
   475                                  
   476 000004B8 4158                        pop r8
   477 000004BA 4983F803                    cmp r8, 3
   478 000004BE 7529                        jne .return_float
   479                                  
   480 000004C0 F2480F2CF0                  cvttsd2si rsi, xmm0
   481                                      MAKE_INT(rax, rsi)
   481                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   481 000004C5 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   481 000004CD 09                  <2>
   481 000004CE 6A09                <2>  push %2
   481 000004D0 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   481 000004D8 482B0424            <2>  sub %1, [rsp]
   481 000004DC 4883C408            <2>  add rsp, 8
   481 000004E0 C60003              <1>  mov byte [%1], %3
   481 000004E3 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   482 000004E7 EB27                        jmp .return
   483                                  
   484                                  .return_float:
   485 000004E9 66480F7EC6                  movq rsi, xmm0
   486                                      MAKE_FLOAT(rax, rsi)
   486                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   486 000004EE 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   486 000004F6 09                  <2>
   486 000004F7 6A09                <2>  push %2
   486 000004F9 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   486 00000501 482B0424            <2>  sub %1, [rsp]
   486 00000505 4883C408            <2>  add rsp, 8
   486 00000509 C60004              <1>  mov byte [%1], %3
   486 0000050C 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   487                                  
   488                                  .return:
   489                                  
   490 00000510 C9                          leave
   491 00000511 C3                          ret
   492                                  
   493                                  bin_mul:
   494 00000512 55                          push rbp
   495 00000513 4889E5                      mov rbp, rsp
   496                                  
   497 00000516 41B800000000                mov r8, 0
   498                                  
   499 0000051C 488B7520                    mov rsi, PVAR(0)
   500 00000520 56                          push rsi
   501 00000521 6A01                        push 1
   502 00000523 68[4D000000]                push SOB_NIL_ADDRESS
   503 00000528 E888FBFFFF                  call is_float
   504 0000052D 4883C418                    add rsp, 3*WORD_SIZE 
   505                                  
   506                                  
   507 00000531 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   508 00000537 7404                        je .test_next
   509 00000539 4983C801                    or r8, 1
   510                                  
   511                                  .test_next:
   512                                  
   513 0000053D 488B7528                    mov rsi, PVAR(1)
   514 00000541 56                          push rsi
   515 00000542 6A01                        push 1
   516 00000544 68[4D000000]                push SOB_NIL_ADDRESS
   517 00000549 E867FBFFFF                  call is_float
   518 0000054E 4883C418                    add rsp, 3*WORD_SIZE 
   519                                  
   520                                  
   521 00000552 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   522 00000558 7404                        je .load_numbers
   523 0000055A 4983C802                    or r8, 2
   524                                  
   525                                  .load_numbers:
   526 0000055E 4150                        push r8
   527                                  
   528 00000560 49D1E8                      shr r8, 1
   529 00000563 720F                        jc .first_arg_int
   530 00000565 488B7520                    mov rsi, PVAR(0)
   531                                      FLOAT_VAL rsi, rsi 
   531 00000569 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   532 0000056D 66480F6EC6                  movq xmm0, rsi
   533 00000572 EB0D                        jmp .load_next_float
   534                                  
   535                                  .first_arg_int:
   536 00000574 488B7520                    mov rsi, PVAR(0)
   537                                      INT_VAL rsi, rsi
   537 00000578 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   538 0000057C F2480F2AC6                  cvtsi2sd xmm0, rsi
   539                                  
   540                                  .load_next_float:
   541 00000581 49D1E8                      shr r8, 1
   542 00000584 720F                        jc .second_arg_int
   543 00000586 488B7528                    mov rsi, PVAR(1)
   544                                      FLOAT_VAL rsi, rsi
   544 0000058A 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   545 0000058E 66480F6ECE                  movq xmm1, rsi
   546 00000593 EB0D                        jmp .perform_float_op
   547                                  
   548                                  .second_arg_int:
   549 00000595 488B7528                    mov rsi, PVAR(1)
   550                                      INT_VAL rsi, rsi
   550 00000599 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   551 0000059D F2480F2ACE                  cvtsi2sd xmm1, rsi
   552                                  
   553                                  .perform_float_op:
   554 000005A2 F20F59C1                    mulsd xmm0, xmm1
   555                                  
   556 000005A6 4158                        pop r8
   557 000005A8 4983F803                    cmp r8, 3
   558 000005AC 7529                        jne .return_float
   559                                  
   560 000005AE F2480F2CF0                  cvttsd2si rsi, xmm0
   561                                      MAKE_INT(rax, rsi)
   561                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   561 000005B3 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   561 000005BB 09                  <2>
   561 000005BC 6A09                <2>  push %2
   561 000005BE 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   561 000005C6 482B0424            <2>  sub %1, [rsp]
   561 000005CA 4883C408            <2>  add rsp, 8
   561 000005CE C60003              <1>  mov byte [%1], %3
   561 000005D1 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   562 000005D5 EB27                        jmp .return
   563                                  
   564                                  .return_float:
   565 000005D7 66480F7EC6                  movq rsi, xmm0
   566                                      MAKE_FLOAT(rax, rsi)
   566                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   566 000005DC 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   566 000005E4 09                  <2>
   566 000005E5 6A09                <2>  push %2
   566 000005E7 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   566 000005EF 482B0424            <2>  sub %1, [rsp]
   566 000005F3 4883C408            <2>  add rsp, 8
   566 000005F7 C60004              <1>  mov byte [%1], %3
   566 000005FA 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   567                                  
   568                                  .return:
   569                                  
   570 000005FE C9                          leave
   571 000005FF C3                          ret
   572                                  
   573                                  bin_sub:
   574 00000600 55                          push rbp
   575 00000601 4889E5                      mov rbp, rsp
   576                                  
   577 00000604 41B800000000                mov r8, 0
   578                                  
   579 0000060A 488B7520                    mov rsi, PVAR(0)
   580 0000060E 56                          push rsi
   581 0000060F 6A01                        push 1
   582 00000611 68[4D000000]                push SOB_NIL_ADDRESS
   583 00000616 E89AFAFFFF                  call is_float
   584 0000061B 4883C418                    add rsp, 3*WORD_SIZE 
   585                                  
   586                                  
   587 0000061F 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   588 00000625 7404                        je .test_next
   589 00000627 4983C801                    or r8, 1
   590                                  
   591                                  .test_next:
   592                                  
   593 0000062B 488B7528                    mov rsi, PVAR(1)
   594 0000062F 56                          push rsi
   595 00000630 6A01                        push 1
   596 00000632 68[4D000000]                push SOB_NIL_ADDRESS
   597 00000637 E879FAFFFF                  call is_float
   598 0000063C 4883C418                    add rsp, 3*WORD_SIZE 
   599                                  
   600                                  
   601 00000640 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   602 00000646 7404                        je .load_numbers
   603 00000648 4983C802                    or r8, 2
   604                                  
   605                                  .load_numbers:
   606 0000064C 4150                        push r8
   607                                  
   608 0000064E 49D1E8                      shr r8, 1
   609 00000651 720F                        jc .first_arg_int
   610 00000653 488B7520                    mov rsi, PVAR(0)
   611                                      FLOAT_VAL rsi, rsi 
   611 00000657 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   612 0000065B 66480F6EC6                  movq xmm0, rsi
   613 00000660 EB0D                        jmp .load_next_float
   614                                  
   615                                  .first_arg_int:
   616 00000662 488B7520                    mov rsi, PVAR(0)
   617                                      INT_VAL rsi, rsi
   617 00000666 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   618 0000066A F2480F2AC6                  cvtsi2sd xmm0, rsi
   619                                  
   620                                  .load_next_float:
   621 0000066F 49D1E8                      shr r8, 1
   622 00000672 720F                        jc .second_arg_int
   623 00000674 488B7528                    mov rsi, PVAR(1)
   624                                      FLOAT_VAL rsi, rsi
   624 00000678 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   625 0000067C 66480F6ECE                  movq xmm1, rsi
   626 00000681 EB0D                        jmp .perform_float_op
   627                                  
   628                                  .second_arg_int:
   629 00000683 488B7528                    mov rsi, PVAR(1)
   630                                      INT_VAL rsi, rsi
   630 00000687 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   631 0000068B F2480F2ACE                  cvtsi2sd xmm1, rsi
   632                                  
   633                                  .perform_float_op:
   634 00000690 F20F5CC1                    subsd xmm0, xmm1
   635                                  
   636 00000694 4158                        pop r8
   637 00000696 4983F803                    cmp r8, 3
   638 0000069A 7529                        jne .return_float
   639                                  
   640 0000069C F2480F2CF0                  cvttsd2si rsi, xmm0
   641                                      MAKE_INT(rax, rsi)
   641                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   641 000006A1 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   641 000006A9 09                  <2>
   641 000006AA 6A09                <2>  push %2
   641 000006AC 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   641 000006B4 482B0424            <2>  sub %1, [rsp]
   641 000006B8 4883C408            <2>  add rsp, 8
   641 000006BC C60003              <1>  mov byte [%1], %3
   641 000006BF 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   642 000006C3 EB27                        jmp .return
   643                                  
   644                                  .return_float:
   645 000006C5 66480F7EC6                  movq rsi, xmm0
   646                                      MAKE_FLOAT(rax, rsi)
   646                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   646 000006CA 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   646 000006D2 09                  <2>
   646 000006D3 6A09                <2>  push %2
   646 000006D5 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   646 000006DD 482B0424            <2>  sub %1, [rsp]
   646 000006E1 4883C408            <2>  add rsp, 8
   646 000006E5 C60004              <1>  mov byte [%1], %3
   646 000006E8 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   647                                  
   648                                  .return:
   649                                  
   650 000006EC C9                          leave
   651 000006ED C3                          ret
   652                                  
   653                                  bin_div:
   654 000006EE 55                          push rbp
   655 000006EF 4889E5                      mov rbp, rsp
   656                                  
   657 000006F2 41B800000000                mov r8, 0
   658                                  
   659 000006F8 488B7520                    mov rsi, PVAR(0)
   660 000006FC 56                          push rsi
   661 000006FD 6A01                        push 1
   662 000006FF 68[4D000000]                push SOB_NIL_ADDRESS
   663 00000704 E8ACF9FFFF                  call is_float
   664 00000709 4883C418                    add rsp, 3*WORD_SIZE 
   665                                  
   666                                  
   667 0000070D 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   668 00000713 7404                        je .test_next
   669 00000715 4983C801                    or r8, 1
   670                                  
   671                                  .test_next:
   672                                  
   673 00000719 488B7528                    mov rsi, PVAR(1)
   674 0000071D 56                          push rsi
   675 0000071E 6A01                        push 1
   676 00000720 68[4D000000]                push SOB_NIL_ADDRESS
   677 00000725 E88BF9FFFF                  call is_float
   678 0000072A 4883C418                    add rsp, 3*WORD_SIZE 
   679                                  
   680                                  
   681 0000072E 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   682 00000734 7404                        je .load_numbers
   683 00000736 4983C802                    or r8, 2
   684                                  
   685                                  .load_numbers:
   686 0000073A 4150                        push r8
   687                                  
   688 0000073C 49D1E8                      shr r8, 1
   689 0000073F 720F                        jc .first_arg_int
   690 00000741 488B7520                    mov rsi, PVAR(0)
   691                                      FLOAT_VAL rsi, rsi 
   691 00000745 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   692 00000749 66480F6EC6                  movq xmm0, rsi
   693 0000074E EB0D                        jmp .load_next_float
   694                                  
   695                                  .first_arg_int:
   696 00000750 488B7520                    mov rsi, PVAR(0)
   697                                      INT_VAL rsi, rsi
   697 00000754 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   698 00000758 F2480F2AC6                  cvtsi2sd xmm0, rsi
   699                                  
   700                                  .load_next_float:
   701 0000075D 49D1E8                      shr r8, 1
   702 00000760 720F                        jc .second_arg_int
   703 00000762 488B7528                    mov rsi, PVAR(1)
   704                                      FLOAT_VAL rsi, rsi
   704 00000766 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   705 0000076A 66480F6ECE                  movq xmm1, rsi
   706 0000076F EB0D                        jmp .perform_float_op
   707                                  
   708                                  .second_arg_int:
   709 00000771 488B7528                    mov rsi, PVAR(1)
   710                                      INT_VAL rsi, rsi
   710 00000775 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   711 00000779 F2480F2ACE                  cvtsi2sd xmm1, rsi
   712                                  
   713                                  .perform_float_op:
   714 0000077E F20F5EC1                    divsd xmm0, xmm1
   715                                  
   716 00000782 4158                        pop r8
   717 00000784 4983F803                    cmp r8, 3
   718 00000788 7529                        jne .return_float
   719                                  
   720 0000078A F2480F2CF0                  cvttsd2si rsi, xmm0
   721                                      MAKE_INT(rax, rsi)
   721                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   721 0000078F 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   721 00000797 09                  <2>
   721 00000798 6A09                <2>  push %2
   721 0000079A 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   721 000007A2 482B0424            <2>  sub %1, [rsp]
   721 000007A6 4883C408            <2>  add rsp, 8
   721 000007AA C60003              <1>  mov byte [%1], %3
   721 000007AD 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   722 000007B1 EB27                        jmp .return
   723                                  
   724                                  .return_float:
   725 000007B3 66480F7EC6                  movq rsi, xmm0
   726                                      MAKE_FLOAT(rax, rsi)
   726                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   726 000007B8 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   726 000007C0 09                  <2>
   726 000007C1 6A09                <2>  push %2
   726 000007C3 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   726 000007CB 482B0424            <2>  sub %1, [rsp]
   726 000007CF 4883C408            <2>  add rsp, 8
   726 000007D3 C60004              <1>  mov byte [%1], %3
   726 000007D6 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   727                                  
   728                                  .return:
   729                                  
   730 000007DA C9                          leave
   731 000007DB C3                          ret
   732                                  
   733                                  bin_lt:
   734 000007DC 55                          push rbp
   735 000007DD 4889E5                      mov rbp, rsp
   736                                  
   737 000007E0 41B800000000                mov r8, 0
   738                                  
   739 000007E6 488B7520                    mov rsi, PVAR(0)
   740 000007EA 56                          push rsi
   741 000007EB 6A01                        push 1
   742 000007ED 68[4D000000]                push SOB_NIL_ADDRESS
   743 000007F2 E8BEF8FFFF                  call is_float
   744 000007F7 4883C418                    add rsp, 3*WORD_SIZE 
   745                                  
   746                                  
   747 000007FB 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   748 00000801 7404                        je .test_next
   749 00000803 4983C801                    or r8, 1
   750                                  
   751                                  .test_next:
   752                                  
   753 00000807 488B7528                    mov rsi, PVAR(1)
   754 0000080B 56                          push rsi
   755 0000080C 6A01                        push 1
   756 0000080E 68[4D000000]                push SOB_NIL_ADDRESS
   757 00000813 E89DF8FFFF                  call is_float
   758 00000818 4883C418                    add rsp, 3*WORD_SIZE 
   759                                  
   760                                  
   761 0000081C 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   762 00000822 7404                        je .load_numbers
   763 00000824 4983C802                    or r8, 2
   764                                  
   765                                  .load_numbers:
   766 00000828 4150                        push r8
   767                                  
   768 0000082A 49D1E8                      shr r8, 1
   769 0000082D 720F                        jc .first_arg_int
   770 0000082F 488B7520                    mov rsi, PVAR(0)
   771                                      FLOAT_VAL rsi, rsi 
   771 00000833 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   772 00000837 66480F6EC6                  movq xmm0, rsi
   773 0000083C EB0D                        jmp .load_next_float
   774                                  
   775                                  .first_arg_int:
   776 0000083E 488B7520                    mov rsi, PVAR(0)
   777                                      INT_VAL rsi, rsi
   777 00000842 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   778 00000846 F2480F2AC6                  cvtsi2sd xmm0, rsi
   779                                  
   780                                  .load_next_float:
   781 0000084B 49D1E8                      shr r8, 1
   782 0000084E 720F                        jc .second_arg_int
   783 00000850 488B7528                    mov rsi, PVAR(1)
   784                                      FLOAT_VAL rsi, rsi
   784 00000854 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   785 00000858 66480F6ECE                  movq xmm1, rsi
   786 0000085D EB0D                        jmp .perform_float_op
   787                                  
   788                                  .second_arg_int:
   789 0000085F 488B7528                    mov rsi, PVAR(1)
   790                                      INT_VAL rsi, rsi
   790 00000863 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   791 00000867 F2480F2ACE                  cvtsi2sd xmm1, rsi
   792                                  
   793                                  .perform_float_op:
   794 0000086C F20FC2C101                  cmpltsd xmm0, xmm1
   795                                  
   796 00000871 4158                        pop r8
   797 00000873 4983F803                    cmp r8, 3
   798 00000877 7529                        jne .return_float
   799                                  
   800 00000879 F2480F2CF0                  cvttsd2si rsi, xmm0
   801                                      MAKE_INT(rax, rsi)
   801                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   801 0000087E 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   801 00000886 09                  <2>
   801 00000887 6A09                <2>  push %2
   801 00000889 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   801 00000891 482B0424            <2>  sub %1, [rsp]
   801 00000895 4883C408            <2>  add rsp, 8
   801 00000899 C60003              <1>  mov byte [%1], %3
   801 0000089C 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   802 000008A0 EB27                        jmp .return
   803                                  
   804                                  .return_float:
   805 000008A2 66480F7EC6                  movq rsi, xmm0
   806                                      MAKE_FLOAT(rax, rsi)
   806                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   806 000008A7 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   806 000008AF 09                  <2>
   806 000008B0 6A09                <2>  push %2
   806 000008B2 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   806 000008BA 482B0424            <2>  sub %1, [rsp]
   806 000008BE 4883C408            <2>  add rsp, 8
   806 000008C2 C60004              <1>  mov byte [%1], %3
   806 000008C5 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   807                                  
   808                                  .return:
   809                                  
   810                                      INT_VAL rsi, rax
   810 000008C9 488B7001            <1>  mov %1, qword [%2+TYPE_SIZE]
   811 000008CD 4883FE00                    cmp rsi, 0
   812 000008D1 740C                        je .return_false
   813 000008D3 48B8-                       mov rax, SOB_TRUE_ADDRESS
   813 000008D5 [5000000000000000] 
   814 000008DD EB0A                        jmp .final_return
   815                                  
   816                                  .return_false:
   817 000008DF 48B8-                       mov rax, SOB_FALSE_ADDRESS
   817 000008E1 [4E00000000000000] 
   818                                  
   819                                  .final_return:
   820                                  
   821                                  
   822 000008E9 C9                          leave
   823 000008EA C3                          ret
   824                                  
   825                                  bin_equ:
   826 000008EB 55                          push rbp
   827 000008EC 4889E5                      mov rbp, rsp
   828                                  
   829 000008EF 41B800000000                mov r8, 0
   830                                  
   831 000008F5 488B7520                    mov rsi, PVAR(0)
   832 000008F9 56                          push rsi
   833 000008FA 6A01                        push 1
   834 000008FC 68[4D000000]                push SOB_NIL_ADDRESS
   835 00000901 E8AFF7FFFF                  call is_float
   836 00000906 4883C418                    add rsp, 3*WORD_SIZE 
   837                                  
   838                                  
   839 0000090A 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   840 00000910 7404                        je .test_next
   841 00000912 4983C801                    or r8, 1
   842                                  
   843                                  .test_next:
   844                                  
   845 00000916 488B7528                    mov rsi, PVAR(1)
   846 0000091A 56                          push rsi
   847 0000091B 6A01                        push 1
   848 0000091D 68[4D000000]                push SOB_NIL_ADDRESS
   849 00000922 E88EF7FFFF                  call is_float
   850 00000927 4883C418                    add rsp, 3*WORD_SIZE 
   851                                  
   852                                  
   853 0000092B 483D[50000000]              cmp rax, SOB_TRUE_ADDRESS
   854 00000931 7404                        je .load_numbers
   855 00000933 4983C802                    or r8, 2
   856                                  
   857                                  .load_numbers:
   858 00000937 4150                        push r8
   859                                  
   860 00000939 49D1E8                      shr r8, 1
   861 0000093C 720F                        jc .first_arg_int
   862 0000093E 488B7520                    mov rsi, PVAR(0)
   863                                      FLOAT_VAL rsi, rsi 
   863 00000942 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   864 00000946 66480F6EC6                  movq xmm0, rsi
   865 0000094B EB0D                        jmp .load_next_float
   866                                  
   867                                  .first_arg_int:
   868 0000094D 488B7520                    mov rsi, PVAR(0)
   869                                      INT_VAL rsi, rsi
   869 00000951 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   870 00000955 F2480F2AC6                  cvtsi2sd xmm0, rsi
   871                                  
   872                                  .load_next_float:
   873 0000095A 49D1E8                      shr r8, 1
   874 0000095D 720F                        jc .second_arg_int
   875 0000095F 488B7528                    mov rsi, PVAR(1)
   876                                      FLOAT_VAL rsi, rsi
   876 00000963 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   877 00000967 66480F6ECE                  movq xmm1, rsi
   878 0000096C EB0D                        jmp .perform_float_op
   879                                  
   880                                  .second_arg_int:
   881 0000096E 488B7528                    mov rsi, PVAR(1)
   882                                      INT_VAL rsi, rsi
   882 00000972 488B7601            <1>  mov %1, qword [%2+TYPE_SIZE]
   883 00000976 F2480F2ACE                  cvtsi2sd xmm1, rsi
   884                                  
   885                                  .perform_float_op:
   886 0000097B F20FC2C100                  cmpeqsd xmm0, xmm1
   887                                  
   888 00000980 4158                        pop r8
   889 00000982 4983F803                    cmp r8, 3
   890 00000986 7529                        jne .return_float
   891                                  
   892 00000988 F2480F2CF0                  cvttsd2si rsi, xmm0
   893                                      MAKE_INT(rax, rsi)
   893                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   893 0000098D 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   893 00000995 09                  <2>
   893 00000996 6A09                <2>  push %2
   893 00000998 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   893 000009A0 482B0424            <2>  sub %1, [rsp]
   893 000009A4 4883C408            <2>  add rsp, 8
   893 000009A8 C60003              <1>  mov byte [%1], %3
   893 000009AB 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   894 000009AF EB27                        jmp .return
   895                                  
   896                                  .return_float:
   897 000009B1 66480F7EC6                  movq rsi, xmm0
   898                                      MAKE_FLOAT(rax, rsi)
   898                              <1>  MALLOC %1, TYPE_SIZE+WORD_SIZE
   898 000009B6 48830425[00000000]- <2>  add qword [malloc_pointer], %2
   898 000009BE 09                  <2>
   898 000009BF 6A09                <2>  push %2
   898 000009C1 488B0425[00000000]  <2>  mov %1, qword [malloc_pointer]
   898 000009C9 482B0424            <2>  sub %1, [rsp]
   898 000009CD 4883C408            <2>  add rsp, 8
   898 000009D1 C60004              <1>  mov byte [%1], %3
   898 000009D4 48897001            <1>  mov qword [%1+TYPE_SIZE], %2
   899                                  
   900                                  .return:
   901                                  
   902                                      INT_VAL rsi, rax
   902 000009D8 488B7001            <1>  mov %1, qword [%2+TYPE_SIZE]
   903 000009DC 4883FE00                    cmp rsi, 0
   904 000009E0 740C                        je .return_false
   905 000009E2 48B8-                       mov rax, SOB_TRUE_ADDRESS
   905 000009E4 [5000000000000000] 
   906 000009EC EB0A                        jmp .final_return
   907                                  
   908                                  .return_false:
   909 000009EE 48B8-                       mov rax, SOB_FALSE_ADDRESS
   909 000009F0 [4E00000000000000] 
   910                                  
   911                                  .final_return:
   912                                  
   913                                  
   914 000009F8 C9                          leave
   915 000009F9 C3                          ret
   916                                  
   917                                  
